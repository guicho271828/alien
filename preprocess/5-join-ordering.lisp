
#|

This file contains various reimplementations of join-ordering in 5-grounding-prolog-3.lisp

|#

(in-package :strips)
(named-readtables:in-readtable :fare-quasiquote)

;;;; the original join ordering implementation was very slow

;; visitall-agl14 (incl. constants) takes 60sec
;; I was doing something wrong here, when the argument is a constant it should not be considered.

;;;; alternative implementations

(defparameter *conditions*
  '((VISITED LOC-X0-Y0) (PLACE LOC-X0-Y0) (VISITED LOC-X0-Y1)
    (PLACE LOC-X0-Y1) (VISITED LOC-X0-Y2) (PLACE LOC-X0-Y2)
    (VISITED LOC-X0-Y3) (PLACE LOC-X0-Y3) (VISITED LOC-X0-Y4)
    (PLACE LOC-X0-Y4) (VISITED LOC-X0-Y5) (PLACE LOC-X0-Y5)
    (VISITED LOC-X0-Y6) (PLACE LOC-X0-Y6) (VISITED LOC-X0-Y7)
    (PLACE LOC-X0-Y7) (VISITED LOC-X0-Y8) (PLACE LOC-X0-Y8)
    (VISITED LOC-X0-Y9) (PLACE LOC-X0-Y9) (VISITED LOC-X0-Y10)
    (PLACE LOC-X0-Y10) (VISITED LOC-X0-Y11) (PLACE LOC-X0-Y11)
    (VISITED LOC-X0-Y12) (PLACE LOC-X0-Y12) (VISITED LOC-X0-Y13)
    (PLACE LOC-X0-Y13) (VISITED LOC-X0-Y14) (PLACE LOC-X0-Y14)
    (VISITED LOC-X0-Y15) (PLACE LOC-X0-Y15) (VISITED LOC-X0-Y16)
    (PLACE LOC-X0-Y16) (VISITED LOC-X0-Y17) (PLACE LOC-X0-Y17)
    (VISITED LOC-X0-Y18) (PLACE LOC-X0-Y18) (VISITED LOC-X0-Y19)
    (PLACE LOC-X0-Y19) (VISITED LOC-X0-Y20) (PLACE LOC-X0-Y20)
    (VISITED LOC-X0-Y21) (PLACE LOC-X0-Y21) (VISITED LOC-X0-Y22)
    (PLACE LOC-X0-Y22) (VISITED LOC-X0-Y23) (PLACE LOC-X0-Y23)
    (VISITED LOC-X0-Y24) (PLACE LOC-X0-Y24) (VISITED LOC-X0-Y25)
    (PLACE LOC-X0-Y25) (VISITED LOC-X0-Y26) (PLACE LOC-X0-Y26)
    (VISITED LOC-X0-Y27) (PLACE LOC-X0-Y27) (VISITED LOC-X0-Y28)
    (PLACE LOC-X0-Y28) (VISITED LOC-X0-Y29) (PLACE LOC-X0-Y29)
    (VISITED LOC-X1-Y0) (PLACE LOC-X1-Y0) (VISITED LOC-X1-Y1)
    (PLACE LOC-X1-Y1) (VISITED LOC-X1-Y2) (PLACE LOC-X1-Y2)
    (VISITED LOC-X1-Y3) (PLACE LOC-X1-Y3) (VISITED LOC-X1-Y4)
    (PLACE LOC-X1-Y4) (VISITED LOC-X1-Y5) (PLACE LOC-X1-Y5)
    (VISITED LOC-X1-Y6) (PLACE LOC-X1-Y6) (VISITED LOC-X1-Y7)
    (PLACE LOC-X1-Y7) (VISITED LOC-X1-Y8) (PLACE LOC-X1-Y8)
    (VISITED LOC-X1-Y9) (PLACE LOC-X1-Y9) (VISITED LOC-X1-Y10)
    (PLACE LOC-X1-Y10) (VISITED LOC-X1-Y11) (PLACE LOC-X1-Y11)
    (VISITED LOC-X1-Y12) (PLACE LOC-X1-Y12) (VISITED LOC-X1-Y13)
    (PLACE LOC-X1-Y13) (VISITED LOC-X1-Y14) (PLACE LOC-X1-Y14)
    (VISITED LOC-X1-Y15) (PLACE LOC-X1-Y15) (VISITED LOC-X1-Y16)
    (PLACE LOC-X1-Y16) (VISITED LOC-X1-Y17) (PLACE LOC-X1-Y17)
    (VISITED LOC-X1-Y18) (PLACE LOC-X1-Y18) (VISITED LOC-X1-Y19)
    (PLACE LOC-X1-Y19) (VISITED LOC-X1-Y20) (PLACE LOC-X1-Y20)
    (VISITED LOC-X1-Y21) (PLACE LOC-X1-Y21) (VISITED LOC-X1-Y22)
    (PLACE LOC-X1-Y22) (VISITED LOC-X1-Y23) (PLACE LOC-X1-Y23)
    (VISITED LOC-X1-Y24) (PLACE LOC-X1-Y24) (VISITED LOC-X1-Y25)
    (PLACE LOC-X1-Y25) (VISITED LOC-X1-Y26) (PLACE LOC-X1-Y26)
    (VISITED LOC-X1-Y27) (PLACE LOC-X1-Y27) (VISITED LOC-X1-Y28)
    (PLACE LOC-X1-Y28) (VISITED LOC-X1-Y29) (PLACE LOC-X1-Y29)
    (VISITED LOC-X2-Y0) (PLACE LOC-X2-Y0) (VISITED LOC-X2-Y1)
    (PLACE LOC-X2-Y1) (VISITED LOC-X2-Y2) (PLACE LOC-X2-Y2)
    (VISITED LOC-X2-Y3) (PLACE LOC-X2-Y3) (VISITED LOC-X2-Y4)
    (PLACE LOC-X2-Y4) (VISITED LOC-X2-Y5) (PLACE LOC-X2-Y5)
    (VISITED LOC-X2-Y6) (PLACE LOC-X2-Y6) (VISITED LOC-X2-Y7)
    (PLACE LOC-X2-Y7) (VISITED LOC-X2-Y8) (PLACE LOC-X2-Y8)
    (VISITED LOC-X2-Y9) (PLACE LOC-X2-Y9) (VISITED LOC-X2-Y10)
    (PLACE LOC-X2-Y10) (VISITED LOC-X2-Y11) (PLACE LOC-X2-Y11)
    (VISITED LOC-X2-Y12) (PLACE LOC-X2-Y12) (VISITED LOC-X2-Y13)
    (PLACE LOC-X2-Y13) (VISITED LOC-X2-Y14) (PLACE LOC-X2-Y14)
    (VISITED LOC-X2-Y15) (PLACE LOC-X2-Y15) (VISITED LOC-X2-Y16)
    (PLACE LOC-X2-Y16) (VISITED LOC-X2-Y17) (PLACE LOC-X2-Y17)
    (VISITED LOC-X2-Y18) (PLACE LOC-X2-Y18) (VISITED LOC-X2-Y19)
    (PLACE LOC-X2-Y19) (VISITED LOC-X2-Y20) (PLACE LOC-X2-Y20)
    (VISITED LOC-X2-Y21) (PLACE LOC-X2-Y21) (VISITED LOC-X2-Y22)
    (PLACE LOC-X2-Y22) (VISITED LOC-X2-Y23) (PLACE LOC-X2-Y23)
    (VISITED LOC-X2-Y24) (PLACE LOC-X2-Y24) (VISITED LOC-X2-Y25)
    (PLACE LOC-X2-Y25) (VISITED LOC-X2-Y26) (PLACE LOC-X2-Y26)
    (VISITED LOC-X2-Y27) (PLACE LOC-X2-Y27) (VISITED LOC-X2-Y28)
    (PLACE LOC-X2-Y28) (VISITED LOC-X2-Y29) (PLACE LOC-X2-Y29)
    (VISITED LOC-X3-Y0) (PLACE LOC-X3-Y0) (VISITED LOC-X3-Y1)
    (PLACE LOC-X3-Y1) (VISITED LOC-X3-Y2) (PLACE LOC-X3-Y2)
    (VISITED LOC-X3-Y3) (PLACE LOC-X3-Y3) (VISITED LOC-X3-Y4)
    (PLACE LOC-X3-Y4) (VISITED LOC-X3-Y5) (PLACE LOC-X3-Y5)
    (VISITED LOC-X3-Y6) (PLACE LOC-X3-Y6) (VISITED LOC-X3-Y7)
    (PLACE LOC-X3-Y7) (VISITED LOC-X3-Y8) (PLACE LOC-X3-Y8)
    (VISITED LOC-X3-Y9) (PLACE LOC-X3-Y9) (VISITED LOC-X3-Y10)
    (PLACE LOC-X3-Y10) (VISITED LOC-X3-Y11) (PLACE LOC-X3-Y11)
    (VISITED LOC-X3-Y12) (PLACE LOC-X3-Y12) (VISITED LOC-X3-Y13)
    (PLACE LOC-X3-Y13) (VISITED LOC-X3-Y14) (PLACE LOC-X3-Y14)
    (VISITED LOC-X3-Y15) (PLACE LOC-X3-Y15) (VISITED LOC-X3-Y16)
    (PLACE LOC-X3-Y16) (VISITED LOC-X3-Y17) (PLACE LOC-X3-Y17)
    (VISITED LOC-X3-Y18) (PLACE LOC-X3-Y18) (VISITED LOC-X3-Y19)
    (PLACE LOC-X3-Y19) (VISITED LOC-X3-Y20) (PLACE LOC-X3-Y20)
    (VISITED LOC-X3-Y21) (PLACE LOC-X3-Y21) (VISITED LOC-X3-Y22)
    (PLACE LOC-X3-Y22) (VISITED LOC-X3-Y23) (PLACE LOC-X3-Y23)
    (VISITED LOC-X3-Y24) (PLACE LOC-X3-Y24) (VISITED LOC-X3-Y25)
    (PLACE LOC-X3-Y25) (VISITED LOC-X3-Y26) (PLACE LOC-X3-Y26)
    (VISITED LOC-X3-Y27) (PLACE LOC-X3-Y27) (VISITED LOC-X3-Y28)
    (PLACE LOC-X3-Y28) (VISITED LOC-X3-Y29) (PLACE LOC-X3-Y29)
    (VISITED LOC-X4-Y0) (PLACE LOC-X4-Y0) (VISITED LOC-X4-Y1)
    (PLACE LOC-X4-Y1) (VISITED LOC-X4-Y2) (PLACE LOC-X4-Y2)
    (VISITED LOC-X4-Y3) (PLACE LOC-X4-Y3) (VISITED LOC-X4-Y4)
    (PLACE LOC-X4-Y4) (VISITED LOC-X4-Y5) (PLACE LOC-X4-Y5)
    (VISITED LOC-X4-Y6) (PLACE LOC-X4-Y6) (VISITED LOC-X4-Y7)
    (PLACE LOC-X4-Y7) (VISITED LOC-X4-Y8) (PLACE LOC-X4-Y8)
    (VISITED LOC-X4-Y9) (PLACE LOC-X4-Y9) (VISITED LOC-X4-Y10)
    (PLACE LOC-X4-Y10) (VISITED LOC-X4-Y11) (PLACE LOC-X4-Y11)
    (VISITED LOC-X4-Y12) (PLACE LOC-X4-Y12) (VISITED LOC-X4-Y13)
    (PLACE LOC-X4-Y13) (VISITED LOC-X4-Y14) (PLACE LOC-X4-Y14)
    (VISITED LOC-X4-Y15) (PLACE LOC-X4-Y15) (VISITED LOC-X4-Y16)
    (PLACE LOC-X4-Y16) (VISITED LOC-X4-Y17) (PLACE LOC-X4-Y17)
    (VISITED LOC-X4-Y18) (PLACE LOC-X4-Y18) (VISITED LOC-X4-Y19)
    (PLACE LOC-X4-Y19) (VISITED LOC-X4-Y20) (PLACE LOC-X4-Y20)
    (VISITED LOC-X4-Y21) (PLACE LOC-X4-Y21) (VISITED LOC-X4-Y22)
    (PLACE LOC-X4-Y22) (VISITED LOC-X4-Y23) (PLACE LOC-X4-Y23)
    (VISITED LOC-X4-Y24) (PLACE LOC-X4-Y24) (VISITED LOC-X4-Y25)
    (PLACE LOC-X4-Y25) (VISITED LOC-X4-Y26) (PLACE LOC-X4-Y26)
    (VISITED LOC-X4-Y27) (PLACE LOC-X4-Y27) (VISITED LOC-X4-Y28)
    (PLACE LOC-X4-Y28) (VISITED LOC-X4-Y29) (PLACE LOC-X4-Y29)
    (VISITED LOC-X5-Y0) (PLACE LOC-X5-Y0) (VISITED LOC-X5-Y1)
    (PLACE LOC-X5-Y1) (VISITED LOC-X5-Y2) (PLACE LOC-X5-Y2)
    (VISITED LOC-X5-Y3) (PLACE LOC-X5-Y3) (VISITED LOC-X5-Y4)
    (PLACE LOC-X5-Y4) (VISITED LOC-X5-Y5) (PLACE LOC-X5-Y5)
    (VISITED LOC-X5-Y6) (PLACE LOC-X5-Y6) (VISITED LOC-X5-Y7)
    (PLACE LOC-X5-Y7) (VISITED LOC-X5-Y8) (PLACE LOC-X5-Y8)
    (VISITED LOC-X5-Y9) (PLACE LOC-X5-Y9) (VISITED LOC-X5-Y10)
    (PLACE LOC-X5-Y10) (VISITED LOC-X5-Y11) (PLACE LOC-X5-Y11)
    (VISITED LOC-X5-Y12) (PLACE LOC-X5-Y12) (VISITED LOC-X5-Y13)
    (PLACE LOC-X5-Y13) (VISITED LOC-X5-Y14) (PLACE LOC-X5-Y14)
    (VISITED LOC-X5-Y15) (PLACE LOC-X5-Y15) (VISITED LOC-X5-Y16)
    (PLACE LOC-X5-Y16) (VISITED LOC-X5-Y17) (PLACE LOC-X5-Y17)
    (VISITED LOC-X5-Y18) (PLACE LOC-X5-Y18) (VISITED LOC-X5-Y19)
    (PLACE LOC-X5-Y19) (VISITED LOC-X5-Y20) (PLACE LOC-X5-Y20)
    (VISITED LOC-X5-Y21) (PLACE LOC-X5-Y21) (VISITED LOC-X5-Y22)
    (PLACE LOC-X5-Y22) (VISITED LOC-X5-Y23) (PLACE LOC-X5-Y23)
    (VISITED LOC-X5-Y24) (PLACE LOC-X5-Y24) (VISITED LOC-X5-Y25)
    (PLACE LOC-X5-Y25) (VISITED LOC-X5-Y26) (PLACE LOC-X5-Y26)
    (VISITED LOC-X5-Y27) (PLACE LOC-X5-Y27) (VISITED LOC-X5-Y28)
    (PLACE LOC-X5-Y28) (VISITED LOC-X5-Y29) (PLACE LOC-X5-Y29)
    (VISITED LOC-X6-Y0) (PLACE LOC-X6-Y0) (VISITED LOC-X6-Y1)
    (PLACE LOC-X6-Y1) (VISITED LOC-X6-Y2) (PLACE LOC-X6-Y2)
    (VISITED LOC-X6-Y3) (PLACE LOC-X6-Y3) (VISITED LOC-X6-Y4)
    (PLACE LOC-X6-Y4) (VISITED LOC-X6-Y5) (PLACE LOC-X6-Y5)
    (VISITED LOC-X6-Y6) (PLACE LOC-X6-Y6) (VISITED LOC-X6-Y7)
    (PLACE LOC-X6-Y7) (VISITED LOC-X6-Y8) (PLACE LOC-X6-Y8)
    (VISITED LOC-X6-Y9) (PLACE LOC-X6-Y9) (VISITED LOC-X6-Y10)
    (PLACE LOC-X6-Y10) (VISITED LOC-X6-Y11) (PLACE LOC-X6-Y11)
    (VISITED LOC-X6-Y12) (PLACE LOC-X6-Y12) (VISITED LOC-X6-Y13)
    (PLACE LOC-X6-Y13) (VISITED LOC-X6-Y14) (PLACE LOC-X6-Y14)
    (VISITED LOC-X6-Y15) (PLACE LOC-X6-Y15) (VISITED LOC-X6-Y16)
    (PLACE LOC-X6-Y16) (VISITED LOC-X6-Y17) (PLACE LOC-X6-Y17)
    (VISITED LOC-X6-Y18) (PLACE LOC-X6-Y18) (VISITED LOC-X6-Y19)
    (PLACE LOC-X6-Y19) (VISITED LOC-X6-Y20) (PLACE LOC-X6-Y20)
    (VISITED LOC-X6-Y21) (PLACE LOC-X6-Y21) (VISITED LOC-X6-Y22)
    (PLACE LOC-X6-Y22) (VISITED LOC-X6-Y23) (PLACE LOC-X6-Y23)
    (VISITED LOC-X6-Y24) (PLACE LOC-X6-Y24) (VISITED LOC-X6-Y25)
    (PLACE LOC-X6-Y25) (VISITED LOC-X6-Y26) (PLACE LOC-X6-Y26)
    (VISITED LOC-X6-Y27) (PLACE LOC-X6-Y27) (VISITED LOC-X6-Y28)
    (PLACE LOC-X6-Y28) (VISITED LOC-X6-Y29) (PLACE LOC-X6-Y29)
    (VISITED LOC-X7-Y0) (PLACE LOC-X7-Y0) (VISITED LOC-X7-Y1)
    (PLACE LOC-X7-Y1) (VISITED LOC-X7-Y2) (PLACE LOC-X7-Y2)
    (VISITED LOC-X7-Y3) (PLACE LOC-X7-Y3) (VISITED LOC-X7-Y4)
    (PLACE LOC-X7-Y4) (VISITED LOC-X7-Y5) (PLACE LOC-X7-Y5)
    (VISITED LOC-X7-Y6) (PLACE LOC-X7-Y6) (VISITED LOC-X7-Y7)
    (PLACE LOC-X7-Y7) (VISITED LOC-X7-Y8) (PLACE LOC-X7-Y8)
    (VISITED LOC-X7-Y9) (PLACE LOC-X7-Y9) (VISITED LOC-X7-Y10)
    (PLACE LOC-X7-Y10) (VISITED LOC-X7-Y11) (PLACE LOC-X7-Y11)
    (VISITED LOC-X7-Y12) (PLACE LOC-X7-Y12) (VISITED LOC-X7-Y13)
    (PLACE LOC-X7-Y13) (VISITED LOC-X7-Y14) (PLACE LOC-X7-Y14)
    (VISITED LOC-X7-Y15) (PLACE LOC-X7-Y15) (VISITED LOC-X7-Y16)
    (PLACE LOC-X7-Y16) (VISITED LOC-X7-Y17) (PLACE LOC-X7-Y17)
    (VISITED LOC-X7-Y18) (PLACE LOC-X7-Y18) (VISITED LOC-X7-Y19)
    (PLACE LOC-X7-Y19) (VISITED LOC-X7-Y20) (PLACE LOC-X7-Y20)
    (VISITED LOC-X7-Y21) (PLACE LOC-X7-Y21) (VISITED LOC-X7-Y22)
    (PLACE LOC-X7-Y22) (VISITED LOC-X7-Y23) (PLACE LOC-X7-Y23)
    (VISITED LOC-X7-Y24) (PLACE LOC-X7-Y24) (VISITED LOC-X7-Y25)
    (PLACE LOC-X7-Y25) (VISITED LOC-X7-Y26) (PLACE LOC-X7-Y26)
    (VISITED LOC-X7-Y27) (PLACE LOC-X7-Y27) (VISITED LOC-X7-Y28)
    (PLACE LOC-X7-Y28) (VISITED LOC-X7-Y29) (PLACE LOC-X7-Y29)
    (VISITED LOC-X8-Y0) (PLACE LOC-X8-Y0) (VISITED LOC-X8-Y1)
    (PLACE LOC-X8-Y1) (VISITED LOC-X8-Y2) (PLACE LOC-X8-Y2)
    (VISITED LOC-X8-Y3) (PLACE LOC-X8-Y3) (VISITED LOC-X8-Y4)
    (PLACE LOC-X8-Y4) (VISITED LOC-X8-Y5) (PLACE LOC-X8-Y5)
    (VISITED LOC-X8-Y6) (PLACE LOC-X8-Y6) (VISITED LOC-X8-Y7)
    (PLACE LOC-X8-Y7) (VISITED LOC-X8-Y8) (PLACE LOC-X8-Y8)
    (VISITED LOC-X8-Y9) (PLACE LOC-X8-Y9) (VISITED LOC-X8-Y10)
    (PLACE LOC-X8-Y10) (VISITED LOC-X8-Y11) (PLACE LOC-X8-Y11)
    (VISITED LOC-X8-Y12) (PLACE LOC-X8-Y12) (VISITED LOC-X8-Y13)
    (PLACE LOC-X8-Y13) (VISITED LOC-X8-Y14) (PLACE LOC-X8-Y14)
    (VISITED LOC-X8-Y15) (PLACE LOC-X8-Y15) (VISITED LOC-X8-Y16)
    (PLACE LOC-X8-Y16) (VISITED LOC-X8-Y17) (PLACE LOC-X8-Y17)
    (VISITED LOC-X8-Y18) (PLACE LOC-X8-Y18) (VISITED LOC-X8-Y19)
    (PLACE LOC-X8-Y19) (VISITED LOC-X8-Y20) (PLACE LOC-X8-Y20)
    (VISITED LOC-X8-Y21) (PLACE LOC-X8-Y21) (VISITED LOC-X8-Y22)
    (PLACE LOC-X8-Y22) (VISITED LOC-X8-Y23) (PLACE LOC-X8-Y23)
    (VISITED LOC-X8-Y24) (PLACE LOC-X8-Y24) (VISITED LOC-X8-Y25)
    (PLACE LOC-X8-Y25) (VISITED LOC-X8-Y26) (PLACE LOC-X8-Y26)
    (VISITED LOC-X8-Y27) (PLACE LOC-X8-Y27) (VISITED LOC-X8-Y28)
    (PLACE LOC-X8-Y28) (VISITED LOC-X8-Y29) (PLACE LOC-X8-Y29)
    (VISITED LOC-X9-Y0) (PLACE LOC-X9-Y0) (VISITED LOC-X9-Y1)
    (PLACE LOC-X9-Y1) (VISITED LOC-X9-Y2) (PLACE LOC-X9-Y2)
    (VISITED LOC-X9-Y3) (PLACE LOC-X9-Y3) (VISITED LOC-X9-Y4)
    (PLACE LOC-X9-Y4) (VISITED LOC-X9-Y5) (PLACE LOC-X9-Y5)
    (VISITED LOC-X9-Y6) (PLACE LOC-X9-Y6) (VISITED LOC-X9-Y7)
    (PLACE LOC-X9-Y7) (VISITED LOC-X9-Y8) (PLACE LOC-X9-Y8)
    (VISITED LOC-X9-Y9) (PLACE LOC-X9-Y9) (VISITED LOC-X9-Y10)
    (PLACE LOC-X9-Y10) (VISITED LOC-X9-Y11) (PLACE LOC-X9-Y11)
    (VISITED LOC-X9-Y12) (PLACE LOC-X9-Y12) (VISITED LOC-X9-Y13)
    (PLACE LOC-X9-Y13) (VISITED LOC-X9-Y14) (PLACE LOC-X9-Y14)
    (VISITED LOC-X9-Y15) (PLACE LOC-X9-Y15) (VISITED LOC-X9-Y16)
    (PLACE LOC-X9-Y16) (VISITED LOC-X9-Y17) (PLACE LOC-X9-Y17)
    (VISITED LOC-X9-Y18) (PLACE LOC-X9-Y18) (VISITED LOC-X9-Y19)
    (PLACE LOC-X9-Y19) (VISITED LOC-X9-Y20) (PLACE LOC-X9-Y20)
    (VISITED LOC-X9-Y21) (PLACE LOC-X9-Y21) (VISITED LOC-X9-Y22)
    (PLACE LOC-X9-Y22) (VISITED LOC-X9-Y23) (PLACE LOC-X9-Y23)
    (VISITED LOC-X9-Y24) (PLACE LOC-X9-Y24) (VISITED LOC-X9-Y25)
    (PLACE LOC-X9-Y25) (VISITED LOC-X9-Y26) (PLACE LOC-X9-Y26)
    (VISITED LOC-X9-Y27) (PLACE LOC-X9-Y27) (VISITED LOC-X9-Y28)
    (PLACE LOC-X9-Y28) (VISITED LOC-X9-Y29) (PLACE LOC-X9-Y29)
    (VISITED LOC-X10-Y0) (PLACE LOC-X10-Y0) (VISITED LOC-X10-Y1)
    (PLACE LOC-X10-Y1) (VISITED LOC-X10-Y2) (PLACE LOC-X10-Y2)
    (VISITED LOC-X10-Y3) (PLACE LOC-X10-Y3) (VISITED LOC-X10-Y4)
    (PLACE LOC-X10-Y4) (VISITED LOC-X10-Y5) (PLACE LOC-X10-Y5)
    (VISITED LOC-X10-Y6) (PLACE LOC-X10-Y6) (VISITED LOC-X10-Y7)
    (PLACE LOC-X10-Y7) (VISITED LOC-X10-Y8) (PLACE LOC-X10-Y8)
    (VISITED LOC-X10-Y9) (PLACE LOC-X10-Y9) (VISITED LOC-X10-Y10)
    (PLACE LOC-X10-Y10) (VISITED LOC-X10-Y11) (PLACE LOC-X10-Y11)
    (VISITED LOC-X10-Y12) (PLACE LOC-X10-Y12) (VISITED LOC-X10-Y13)
    (PLACE LOC-X10-Y13) (VISITED LOC-X10-Y14) (PLACE LOC-X10-Y14)
    (VISITED LOC-X10-Y15) (PLACE LOC-X10-Y15) (VISITED LOC-X10-Y16)
    (PLACE LOC-X10-Y16) (VISITED LOC-X10-Y17) (PLACE LOC-X10-Y17)
    (VISITED LOC-X10-Y18) (PLACE LOC-X10-Y18) (VISITED LOC-X10-Y19)
    (PLACE LOC-X10-Y19) (VISITED LOC-X10-Y20) (PLACE LOC-X10-Y20)
    (VISITED LOC-X10-Y21) (PLACE LOC-X10-Y21) (VISITED LOC-X10-Y22)
    (PLACE LOC-X10-Y22) (VISITED LOC-X10-Y23) (PLACE LOC-X10-Y23)
    (VISITED LOC-X10-Y24) (PLACE LOC-X10-Y24) (VISITED LOC-X10-Y25)
    (PLACE LOC-X10-Y25) (VISITED LOC-X10-Y26) (PLACE LOC-X10-Y26)
    (VISITED LOC-X10-Y27) (PLACE LOC-X10-Y27) (VISITED LOC-X10-Y28)
    (PLACE LOC-X10-Y28) (VISITED LOC-X10-Y29) (PLACE LOC-X10-Y29)
    (VISITED LOC-X11-Y0) (PLACE LOC-X11-Y0) (VISITED LOC-X11-Y1)
    (PLACE LOC-X11-Y1) (VISITED LOC-X11-Y2) (PLACE LOC-X11-Y2)
    (VISITED LOC-X11-Y3) (PLACE LOC-X11-Y3) (VISITED LOC-X11-Y4)
    (PLACE LOC-X11-Y4) (VISITED LOC-X11-Y5) (PLACE LOC-X11-Y5)
    (VISITED LOC-X11-Y6) (PLACE LOC-X11-Y6) (VISITED LOC-X11-Y7)
    (PLACE LOC-X11-Y7) (VISITED LOC-X11-Y8) (PLACE LOC-X11-Y8)
    (VISITED LOC-X11-Y9) (PLACE LOC-X11-Y9) (VISITED LOC-X11-Y10)
    (PLACE LOC-X11-Y10) (VISITED LOC-X11-Y11) (PLACE LOC-X11-Y11)
    (VISITED LOC-X11-Y12) (PLACE LOC-X11-Y12) (VISITED LOC-X11-Y13)
    (PLACE LOC-X11-Y13) (VISITED LOC-X11-Y14) (PLACE LOC-X11-Y14)
    (VISITED LOC-X11-Y15) (PLACE LOC-X11-Y15) (VISITED LOC-X11-Y16)
    (PLACE LOC-X11-Y16) (VISITED LOC-X11-Y17) (PLACE LOC-X11-Y17)
    (VISITED LOC-X11-Y18) (PLACE LOC-X11-Y18) (VISITED LOC-X11-Y19)
    (PLACE LOC-X11-Y19) (VISITED LOC-X11-Y20) (PLACE LOC-X11-Y20)
    (VISITED LOC-X11-Y21) (PLACE LOC-X11-Y21) (VISITED LOC-X11-Y22)
    (PLACE LOC-X11-Y22) (VISITED LOC-X11-Y23) (PLACE LOC-X11-Y23)
    (VISITED LOC-X11-Y24) (PLACE LOC-X11-Y24) (VISITED LOC-X11-Y25)
    (PLACE LOC-X11-Y25) (VISITED LOC-X11-Y26) (PLACE LOC-X11-Y26)
    (VISITED LOC-X11-Y27) (PLACE LOC-X11-Y27) (VISITED LOC-X11-Y28)
    (PLACE LOC-X11-Y28) (VISITED LOC-X11-Y29) (PLACE LOC-X11-Y29)
    (VISITED LOC-X12-Y0) (PLACE LOC-X12-Y0) (VISITED LOC-X12-Y1)
    (PLACE LOC-X12-Y1) (VISITED LOC-X12-Y2) (PLACE LOC-X12-Y2)
    (VISITED LOC-X12-Y3) (PLACE LOC-X12-Y3) (VISITED LOC-X12-Y4)
    (PLACE LOC-X12-Y4) (VISITED LOC-X12-Y5) (PLACE LOC-X12-Y5)
    (VISITED LOC-X12-Y6) (PLACE LOC-X12-Y6) (VISITED LOC-X12-Y7)
    (PLACE LOC-X12-Y7) (VISITED LOC-X12-Y8) (PLACE LOC-X12-Y8)
    (VISITED LOC-X12-Y9) (PLACE LOC-X12-Y9) (VISITED LOC-X12-Y10)
    (PLACE LOC-X12-Y10) (VISITED LOC-X12-Y11) (PLACE LOC-X12-Y11)
    (VISITED LOC-X12-Y12) (PLACE LOC-X12-Y12) (VISITED LOC-X12-Y13)
    (PLACE LOC-X12-Y13) (VISITED LOC-X12-Y14) (PLACE LOC-X12-Y14)
    (VISITED LOC-X12-Y15) (PLACE LOC-X12-Y15) (VISITED LOC-X12-Y16)
    (PLACE LOC-X12-Y16) (VISITED LOC-X12-Y17) (PLACE LOC-X12-Y17)
    (VISITED LOC-X12-Y18) (PLACE LOC-X12-Y18) (VISITED LOC-X12-Y19)
    (PLACE LOC-X12-Y19) (VISITED LOC-X12-Y20) (PLACE LOC-X12-Y20)
    (VISITED LOC-X12-Y21) (PLACE LOC-X12-Y21) (VISITED LOC-X12-Y22)
    (PLACE LOC-X12-Y22) (VISITED LOC-X12-Y23) (PLACE LOC-X12-Y23)
    (VISITED LOC-X12-Y24) (PLACE LOC-X12-Y24) (VISITED LOC-X12-Y25)
    (PLACE LOC-X12-Y25) (VISITED LOC-X12-Y26) (PLACE LOC-X12-Y26)
    (VISITED LOC-X12-Y27) (PLACE LOC-X12-Y27) (VISITED LOC-X12-Y28)
    (PLACE LOC-X12-Y28) (VISITED LOC-X12-Y29) (PLACE LOC-X12-Y29)
    (VISITED LOC-X13-Y0) (PLACE LOC-X13-Y0) (VISITED LOC-X13-Y1)
    (PLACE LOC-X13-Y1) (VISITED LOC-X13-Y2) (PLACE LOC-X13-Y2)
    (VISITED LOC-X13-Y3) (PLACE LOC-X13-Y3) (VISITED LOC-X13-Y4)
    (PLACE LOC-X13-Y4) (VISITED LOC-X13-Y5) (PLACE LOC-X13-Y5)
    (VISITED LOC-X13-Y6) (PLACE LOC-X13-Y6) (VISITED LOC-X13-Y7)
    (PLACE LOC-X13-Y7) (VISITED LOC-X13-Y8) (PLACE LOC-X13-Y8)
    (VISITED LOC-X13-Y9) (PLACE LOC-X13-Y9) (VISITED LOC-X13-Y10)
    (PLACE LOC-X13-Y10) (VISITED LOC-X13-Y11) (PLACE LOC-X13-Y11)
    (VISITED LOC-X13-Y12) (PLACE LOC-X13-Y12) (VISITED LOC-X13-Y13)
    (PLACE LOC-X13-Y13) (VISITED LOC-X13-Y14) (PLACE LOC-X13-Y14)
    (VISITED LOC-X13-Y15) (PLACE LOC-X13-Y15) (VISITED LOC-X13-Y16)
    (PLACE LOC-X13-Y16) (VISITED LOC-X13-Y17) (PLACE LOC-X13-Y17)
    (VISITED LOC-X13-Y18) (PLACE LOC-X13-Y18) (VISITED LOC-X13-Y19)
    (PLACE LOC-X13-Y19) (VISITED LOC-X13-Y20) (PLACE LOC-X13-Y20)
    (VISITED LOC-X13-Y21) (PLACE LOC-X13-Y21) (VISITED LOC-X13-Y22)
    (PLACE LOC-X13-Y22) (VISITED LOC-X13-Y23) (PLACE LOC-X13-Y23)
    (VISITED LOC-X13-Y24) (PLACE LOC-X13-Y24) (VISITED LOC-X13-Y25)
    (PLACE LOC-X13-Y25) (VISITED LOC-X13-Y26) (PLACE LOC-X13-Y26)
    (VISITED LOC-X13-Y27) (PLACE LOC-X13-Y27) (VISITED LOC-X13-Y28)
    (PLACE LOC-X13-Y28) (VISITED LOC-X13-Y29) (PLACE LOC-X13-Y29)
    (VISITED LOC-X14-Y0) (PLACE LOC-X14-Y0) (VISITED LOC-X14-Y1)
    (PLACE LOC-X14-Y1) (VISITED LOC-X14-Y2) (PLACE LOC-X14-Y2)
    (VISITED LOC-X14-Y3) (PLACE LOC-X14-Y3) (VISITED LOC-X14-Y4)
    (PLACE LOC-X14-Y4) (VISITED LOC-X14-Y5) (PLACE LOC-X14-Y5)
    (VISITED LOC-X14-Y6) (PLACE LOC-X14-Y6) (VISITED LOC-X14-Y7)
    (PLACE LOC-X14-Y7) (VISITED LOC-X14-Y8) (PLACE LOC-X14-Y8)
    (VISITED LOC-X14-Y9) (PLACE LOC-X14-Y9) (VISITED LOC-X14-Y10)
    (PLACE LOC-X14-Y10) (VISITED LOC-X14-Y11) (PLACE LOC-X14-Y11)
    (VISITED LOC-X14-Y12) (PLACE LOC-X14-Y12) (VISITED LOC-X14-Y13)
    (PLACE LOC-X14-Y13) (VISITED LOC-X14-Y14) (PLACE LOC-X14-Y14)
    (VISITED LOC-X14-Y15) (PLACE LOC-X14-Y15) (VISITED LOC-X14-Y16)
    (PLACE LOC-X14-Y16) (VISITED LOC-X14-Y17) (PLACE LOC-X14-Y17)
    (VISITED LOC-X14-Y18) (PLACE LOC-X14-Y18) (VISITED LOC-X14-Y19)
    (PLACE LOC-X14-Y19) (VISITED LOC-X14-Y20) (PLACE LOC-X14-Y20)
    (VISITED LOC-X14-Y21) (PLACE LOC-X14-Y21) (VISITED LOC-X14-Y22)
    (PLACE LOC-X14-Y22) (VISITED LOC-X14-Y23) (PLACE LOC-X14-Y23)
    (VISITED LOC-X14-Y24) (PLACE LOC-X14-Y24) (VISITED LOC-X14-Y25)
    (PLACE LOC-X14-Y25) (VISITED LOC-X14-Y26) (PLACE LOC-X14-Y26)
    (VISITED LOC-X14-Y27) (PLACE LOC-X14-Y27) (VISITED LOC-X14-Y28)
    (PLACE LOC-X14-Y28) (VISITED LOC-X14-Y29) (PLACE LOC-X14-Y29)
    (VISITED LOC-X15-Y0) (PLACE LOC-X15-Y0) (VISITED LOC-X15-Y1)
    (PLACE LOC-X15-Y1) (VISITED LOC-X15-Y2) (PLACE LOC-X15-Y2)
    (VISITED LOC-X15-Y3) (PLACE LOC-X15-Y3) (VISITED LOC-X15-Y4)
    (PLACE LOC-X15-Y4) (VISITED LOC-X15-Y5) (PLACE LOC-X15-Y5)
    (VISITED LOC-X15-Y6) (PLACE LOC-X15-Y6) (VISITED LOC-X15-Y7)
    (PLACE LOC-X15-Y7) (VISITED LOC-X15-Y8) (PLACE LOC-X15-Y8)
    (VISITED LOC-X15-Y9) (PLACE LOC-X15-Y9) (VISITED LOC-X15-Y10)
    (PLACE LOC-X15-Y10) (VISITED LOC-X15-Y11) (PLACE LOC-X15-Y11)
    (VISITED LOC-X15-Y12) (PLACE LOC-X15-Y12) (VISITED LOC-X15-Y13)
    (PLACE LOC-X15-Y13) (VISITED LOC-X15-Y14) (PLACE LOC-X15-Y14)
    (VISITED LOC-X15-Y15) (PLACE LOC-X15-Y15) (VISITED LOC-X15-Y16)
    (PLACE LOC-X15-Y16) (VISITED LOC-X15-Y17) (PLACE LOC-X15-Y17)
    (VISITED LOC-X15-Y18) (PLACE LOC-X15-Y18) (VISITED LOC-X15-Y19)
    (PLACE LOC-X15-Y19) (VISITED LOC-X15-Y20) (PLACE LOC-X15-Y20)
    (VISITED LOC-X15-Y21) (PLACE LOC-X15-Y21) (VISITED LOC-X15-Y22)
    (PLACE LOC-X15-Y22) (VISITED LOC-X15-Y23) (PLACE LOC-X15-Y23)
    (VISITED LOC-X15-Y24) (PLACE LOC-X15-Y24) (VISITED LOC-X15-Y25)
    (PLACE LOC-X15-Y25) (VISITED LOC-X15-Y26) (PLACE LOC-X15-Y26)
    (VISITED LOC-X15-Y27) (PLACE LOC-X15-Y27) (VISITED LOC-X15-Y28)
    (PLACE LOC-X15-Y28) (VISITED LOC-X15-Y29) (PLACE LOC-X15-Y29)
    (VISITED LOC-X16-Y0) (PLACE LOC-X16-Y0) (VISITED LOC-X16-Y1)
    (PLACE LOC-X16-Y1) (VISITED LOC-X16-Y2) (PLACE LOC-X16-Y2)
    (VISITED LOC-X16-Y3) (PLACE LOC-X16-Y3) (VISITED LOC-X16-Y4)
    (PLACE LOC-X16-Y4) (VISITED LOC-X16-Y5) (PLACE LOC-X16-Y5)
    (VISITED LOC-X16-Y6) (PLACE LOC-X16-Y6) (VISITED LOC-X16-Y7)
    (PLACE LOC-X16-Y7) (VISITED LOC-X16-Y8) (PLACE LOC-X16-Y8)
    (VISITED LOC-X16-Y9) (PLACE LOC-X16-Y9) (VISITED LOC-X16-Y10)
    (PLACE LOC-X16-Y10) (VISITED LOC-X16-Y11) (PLACE LOC-X16-Y11)
    (VISITED LOC-X16-Y12) (PLACE LOC-X16-Y12) (VISITED LOC-X16-Y13)
    (PLACE LOC-X16-Y13) (VISITED LOC-X16-Y14) (PLACE LOC-X16-Y14)
    (VISITED LOC-X16-Y15) (PLACE LOC-X16-Y15) (VISITED LOC-X16-Y16)
    (PLACE LOC-X16-Y16) (VISITED LOC-X16-Y17) (PLACE LOC-X16-Y17)
    (VISITED LOC-X16-Y18) (PLACE LOC-X16-Y18) (VISITED LOC-X16-Y19)
    (PLACE LOC-X16-Y19) (VISITED LOC-X16-Y20) (PLACE LOC-X16-Y20)
    (VISITED LOC-X16-Y21) (PLACE LOC-X16-Y21) (VISITED LOC-X16-Y22)
    (PLACE LOC-X16-Y22) (VISITED LOC-X16-Y23) (PLACE LOC-X16-Y23)
    (VISITED LOC-X16-Y24) (PLACE LOC-X16-Y24) (VISITED LOC-X16-Y25)
    (PLACE LOC-X16-Y25) (VISITED LOC-X16-Y26) (PLACE LOC-X16-Y26)
    (VISITED LOC-X16-Y27) (PLACE LOC-X16-Y27) (VISITED LOC-X16-Y28)
    (PLACE LOC-X16-Y28) (VISITED LOC-X16-Y29) (PLACE LOC-X16-Y29)
    (VISITED LOC-X17-Y0) (PLACE LOC-X17-Y0) (VISITED LOC-X17-Y1)
    (PLACE LOC-X17-Y1) (VISITED LOC-X17-Y2) (PLACE LOC-X17-Y2)
    (VISITED LOC-X17-Y3) (PLACE LOC-X17-Y3) (VISITED LOC-X17-Y4)
    (PLACE LOC-X17-Y4) (VISITED LOC-X17-Y5) (PLACE LOC-X17-Y5)
    (VISITED LOC-X17-Y6) (PLACE LOC-X17-Y6) (VISITED LOC-X17-Y7)
    (PLACE LOC-X17-Y7) (VISITED LOC-X17-Y8) (PLACE LOC-X17-Y8)
    (VISITED LOC-X17-Y9) (PLACE LOC-X17-Y9) (VISITED LOC-X17-Y10)
    (PLACE LOC-X17-Y10) (VISITED LOC-X17-Y11) (PLACE LOC-X17-Y11)
    (VISITED LOC-X17-Y12) (PLACE LOC-X17-Y12) (VISITED LOC-X17-Y13)
    (PLACE LOC-X17-Y13) (VISITED LOC-X17-Y14) (PLACE LOC-X17-Y14)
    (VISITED LOC-X17-Y15) (PLACE LOC-X17-Y15) (VISITED LOC-X17-Y16)
    (PLACE LOC-X17-Y16) (VISITED LOC-X17-Y17) (PLACE LOC-X17-Y17)
    (VISITED LOC-X17-Y18) (PLACE LOC-X17-Y18) (VISITED LOC-X17-Y19)
    (PLACE LOC-X17-Y19) (VISITED LOC-X17-Y20) (PLACE LOC-X17-Y20)
    (VISITED LOC-X17-Y21) (PLACE LOC-X17-Y21) (VISITED LOC-X17-Y22)
    (PLACE LOC-X17-Y22) (VISITED LOC-X17-Y23) (PLACE LOC-X17-Y23)
    (VISITED LOC-X17-Y24) (PLACE LOC-X17-Y24) (VISITED LOC-X17-Y25)
    (PLACE LOC-X17-Y25) (VISITED LOC-X17-Y26) (PLACE LOC-X17-Y26)
    (VISITED LOC-X17-Y27) (PLACE LOC-X17-Y27) (VISITED LOC-X17-Y28)
    (PLACE LOC-X17-Y28) (VISITED LOC-X17-Y29) (PLACE LOC-X17-Y29)
    (VISITED LOC-X18-Y0) (PLACE LOC-X18-Y0) (VISITED LOC-X18-Y1)
    (PLACE LOC-X18-Y1) (VISITED LOC-X18-Y2) (PLACE LOC-X18-Y2)
    (VISITED LOC-X18-Y3) (PLACE LOC-X18-Y3) (VISITED LOC-X18-Y4)
    (PLACE LOC-X18-Y4) (VISITED LOC-X18-Y5) (PLACE LOC-X18-Y5)
    (VISITED LOC-X18-Y6) (PLACE LOC-X18-Y6) (VISITED LOC-X18-Y7)
    (PLACE LOC-X18-Y7) (VISITED LOC-X18-Y8) (PLACE LOC-X18-Y8)
    (VISITED LOC-X18-Y9) (PLACE LOC-X18-Y9) (VISITED LOC-X18-Y10)
    (PLACE LOC-X18-Y10) (VISITED LOC-X18-Y11) (PLACE LOC-X18-Y11)
    (VISITED LOC-X18-Y12) (PLACE LOC-X18-Y12) (VISITED LOC-X18-Y13)
    (PLACE LOC-X18-Y13) (VISITED LOC-X18-Y14) (PLACE LOC-X18-Y14)
    (VISITED LOC-X18-Y15) (PLACE LOC-X18-Y15) (VISITED LOC-X18-Y16)
    (PLACE LOC-X18-Y16) (VISITED LOC-X18-Y17) (PLACE LOC-X18-Y17)
    (VISITED LOC-X18-Y18) (PLACE LOC-X18-Y18) (VISITED LOC-X18-Y19)
    (PLACE LOC-X18-Y19) (VISITED LOC-X18-Y20) (PLACE LOC-X18-Y20)
    (VISITED LOC-X18-Y21) (PLACE LOC-X18-Y21) (VISITED LOC-X18-Y22)
    (PLACE LOC-X18-Y22) (VISITED LOC-X18-Y23) (PLACE LOC-X18-Y23)
    (VISITED LOC-X18-Y24) (PLACE LOC-X18-Y24) (VISITED LOC-X18-Y25)
    (PLACE LOC-X18-Y25) (VISITED LOC-X18-Y26) (PLACE LOC-X18-Y26)
    (VISITED LOC-X18-Y27) (PLACE LOC-X18-Y27) (VISITED LOC-X18-Y28)
    (PLACE LOC-X18-Y28) (VISITED LOC-X18-Y29) (PLACE LOC-X18-Y29)
    (VISITED LOC-X19-Y0) (PLACE LOC-X19-Y0) (VISITED LOC-X19-Y1)
    (PLACE LOC-X19-Y1) (VISITED LOC-X19-Y2) (PLACE LOC-X19-Y2)
    (VISITED LOC-X19-Y3) (PLACE LOC-X19-Y3) (VISITED LOC-X19-Y4)
    (PLACE LOC-X19-Y4) (VISITED LOC-X19-Y5) (PLACE LOC-X19-Y5)
    (VISITED LOC-X19-Y6) (PLACE LOC-X19-Y6) (VISITED LOC-X19-Y7)
    (PLACE LOC-X19-Y7) (VISITED LOC-X19-Y8) (PLACE LOC-X19-Y8)
    (VISITED LOC-X19-Y9) (PLACE LOC-X19-Y9) (VISITED LOC-X19-Y10)
    (PLACE LOC-X19-Y10) (VISITED LOC-X19-Y11) (PLACE LOC-X19-Y11)
    (VISITED LOC-X19-Y12) (PLACE LOC-X19-Y12) (VISITED LOC-X19-Y13)
    (PLACE LOC-X19-Y13) (VISITED LOC-X19-Y14) (PLACE LOC-X19-Y14)
    (VISITED LOC-X19-Y15) (PLACE LOC-X19-Y15) (VISITED LOC-X19-Y16)
    (PLACE LOC-X19-Y16) (VISITED LOC-X19-Y17) (PLACE LOC-X19-Y17)
    (VISITED LOC-X19-Y18) (PLACE LOC-X19-Y18) (VISITED LOC-X19-Y19)
    (PLACE LOC-X19-Y19) (VISITED LOC-X19-Y20) (PLACE LOC-X19-Y20)
    (VISITED LOC-X19-Y21) (PLACE LOC-X19-Y21) (VISITED LOC-X19-Y22)
    (PLACE LOC-X19-Y22) (VISITED LOC-X19-Y23) (PLACE LOC-X19-Y23)
    (VISITED LOC-X19-Y24) (PLACE LOC-X19-Y24) (VISITED LOC-X19-Y25)
    (PLACE LOC-X19-Y25) (VISITED LOC-X19-Y26) (PLACE LOC-X19-Y26)
    (VISITED LOC-X19-Y27) (PLACE LOC-X19-Y27) (VISITED LOC-X19-Y28)
    (PLACE LOC-X19-Y28) (VISITED LOC-X19-Y29) (PLACE LOC-X19-Y29)
    (VISITED LOC-X20-Y0) (PLACE LOC-X20-Y0) (VISITED LOC-X20-Y1)
    (PLACE LOC-X20-Y1) (VISITED LOC-X20-Y2) (PLACE LOC-X20-Y2)
    (VISITED LOC-X20-Y3) (PLACE LOC-X20-Y3) (VISITED LOC-X20-Y4)
    (PLACE LOC-X20-Y4) (VISITED LOC-X20-Y5) (PLACE LOC-X20-Y5)
    (VISITED LOC-X20-Y6) (PLACE LOC-X20-Y6) (VISITED LOC-X20-Y7)
    (PLACE LOC-X20-Y7) (VISITED LOC-X20-Y8) (PLACE LOC-X20-Y8)
    (VISITED LOC-X20-Y9) (PLACE LOC-X20-Y9) (VISITED LOC-X20-Y10)
    (PLACE LOC-X20-Y10) (VISITED LOC-X20-Y11) (PLACE LOC-X20-Y11)
    (VISITED LOC-X20-Y12) (PLACE LOC-X20-Y12) (VISITED LOC-X20-Y13)
    (PLACE LOC-X20-Y13) (VISITED LOC-X20-Y14) (PLACE LOC-X20-Y14)
    (VISITED LOC-X20-Y15) (PLACE LOC-X20-Y15) (VISITED LOC-X20-Y16)
    (PLACE LOC-X20-Y16) (VISITED LOC-X20-Y17) (PLACE LOC-X20-Y17)
    (VISITED LOC-X20-Y18) (PLACE LOC-X20-Y18) (VISITED LOC-X20-Y19)
    (PLACE LOC-X20-Y19) (VISITED LOC-X20-Y20) (PLACE LOC-X20-Y20)
    (VISITED LOC-X20-Y21) (PLACE LOC-X20-Y21) (VISITED LOC-X20-Y22)
    (PLACE LOC-X20-Y22) (VISITED LOC-X20-Y23) (PLACE LOC-X20-Y23)
    (VISITED LOC-X20-Y24) (PLACE LOC-X20-Y24) (VISITED LOC-X20-Y25)
    (PLACE LOC-X20-Y25) (VISITED LOC-X20-Y26) (PLACE LOC-X20-Y26)
    (VISITED LOC-X20-Y27) (PLACE LOC-X20-Y27) (VISITED LOC-X20-Y28)
    (PLACE LOC-X20-Y28) (VISITED LOC-X20-Y29) (PLACE LOC-X20-Y29)
    (VISITED LOC-X21-Y0) (PLACE LOC-X21-Y0) (VISITED LOC-X21-Y1)
    (PLACE LOC-X21-Y1) (VISITED LOC-X21-Y2) (PLACE LOC-X21-Y2)
    (VISITED LOC-X21-Y3) (PLACE LOC-X21-Y3) (VISITED LOC-X21-Y4)
    (PLACE LOC-X21-Y4) (VISITED LOC-X21-Y5) (PLACE LOC-X21-Y5)
    (VISITED LOC-X21-Y6) (PLACE LOC-X21-Y6) (VISITED LOC-X21-Y7)
    (PLACE LOC-X21-Y7) (VISITED LOC-X21-Y8) (PLACE LOC-X21-Y8)
    (VISITED LOC-X21-Y9) (PLACE LOC-X21-Y9) (VISITED LOC-X21-Y10)
    (PLACE LOC-X21-Y10) (VISITED LOC-X21-Y11) (PLACE LOC-X21-Y11)
    (VISITED LOC-X21-Y12) (PLACE LOC-X21-Y12) (VISITED LOC-X21-Y13)
    (PLACE LOC-X21-Y13) (VISITED LOC-X21-Y14) (PLACE LOC-X21-Y14)
    (VISITED LOC-X21-Y15) (PLACE LOC-X21-Y15) (VISITED LOC-X21-Y16)
    (PLACE LOC-X21-Y16) (VISITED LOC-X21-Y17) (PLACE LOC-X21-Y17)
    (VISITED LOC-X21-Y18) (PLACE LOC-X21-Y18) (VISITED LOC-X21-Y19)
    (PLACE LOC-X21-Y19) (VISITED LOC-X21-Y20) (PLACE LOC-X21-Y20)
    (VISITED LOC-X21-Y21) (PLACE LOC-X21-Y21) (VISITED LOC-X21-Y22)
    (PLACE LOC-X21-Y22) (VISITED LOC-X21-Y23) (PLACE LOC-X21-Y23)
    (VISITED LOC-X21-Y24) (PLACE LOC-X21-Y24) (VISITED LOC-X21-Y25)
    (PLACE LOC-X21-Y25) (VISITED LOC-X21-Y26) (PLACE LOC-X21-Y26)
    (VISITED LOC-X21-Y27) (PLACE LOC-X21-Y27) (VISITED LOC-X21-Y28)
    (PLACE LOC-X21-Y28) (VISITED LOC-X21-Y29) (PLACE LOC-X21-Y29)
    (VISITED LOC-X22-Y0) (PLACE LOC-X22-Y0) (VISITED LOC-X22-Y1)
    (PLACE LOC-X22-Y1) (VISITED LOC-X22-Y2) (PLACE LOC-X22-Y2)
    (VISITED LOC-X22-Y3) (PLACE LOC-X22-Y3) (VISITED LOC-X22-Y4)
    (PLACE LOC-X22-Y4) (VISITED LOC-X22-Y5) (PLACE LOC-X22-Y5)
    (VISITED LOC-X22-Y6) (PLACE LOC-X22-Y6) (VISITED LOC-X22-Y7)
    (PLACE LOC-X22-Y7) (VISITED LOC-X22-Y8) (PLACE LOC-X22-Y8)
    (VISITED LOC-X22-Y9) (PLACE LOC-X22-Y9) (VISITED LOC-X22-Y10)
    (PLACE LOC-X22-Y10) (VISITED LOC-X22-Y11) (PLACE LOC-X22-Y11)
    (VISITED LOC-X22-Y12) (PLACE LOC-X22-Y12) (VISITED LOC-X22-Y13)
    (PLACE LOC-X22-Y13) (VISITED LOC-X22-Y14) (PLACE LOC-X22-Y14)
    (VISITED LOC-X22-Y15) (PLACE LOC-X22-Y15) (VISITED LOC-X22-Y16)
    (PLACE LOC-X22-Y16) (VISITED LOC-X22-Y17) (PLACE LOC-X22-Y17)
    (VISITED LOC-X22-Y18) (PLACE LOC-X22-Y18) (VISITED LOC-X22-Y19)
    (PLACE LOC-X22-Y19) (VISITED LOC-X22-Y20) (PLACE LOC-X22-Y20)
    (VISITED LOC-X22-Y21) (PLACE LOC-X22-Y21) (VISITED LOC-X22-Y22)
    (PLACE LOC-X22-Y22) (VISITED LOC-X22-Y23) (PLACE LOC-X22-Y23)
    (VISITED LOC-X22-Y24) (PLACE LOC-X22-Y24) (VISITED LOC-X22-Y25)
    (PLACE LOC-X22-Y25) (VISITED LOC-X22-Y26) (PLACE LOC-X22-Y26)
    (VISITED LOC-X22-Y27) (PLACE LOC-X22-Y27) (VISITED LOC-X22-Y28)
    (PLACE LOC-X22-Y28) (VISITED LOC-X22-Y29) (PLACE LOC-X22-Y29)
    (VISITED LOC-X23-Y0) (PLACE LOC-X23-Y0) (VISITED LOC-X23-Y1)
    (PLACE LOC-X23-Y1) (VISITED LOC-X23-Y2) (PLACE LOC-X23-Y2)
    (VISITED LOC-X23-Y3) (PLACE LOC-X23-Y3) (VISITED LOC-X23-Y4)
    (PLACE LOC-X23-Y4) (VISITED LOC-X23-Y5) (PLACE LOC-X23-Y5)
    (VISITED LOC-X23-Y6) (PLACE LOC-X23-Y6) (VISITED LOC-X23-Y7)
    (PLACE LOC-X23-Y7) (VISITED LOC-X23-Y8) (PLACE LOC-X23-Y8)
    (VISITED LOC-X23-Y9) (PLACE LOC-X23-Y9) (VISITED LOC-X23-Y10)
    (PLACE LOC-X23-Y10) (VISITED LOC-X23-Y11) (PLACE LOC-X23-Y11)
    (VISITED LOC-X23-Y12) (PLACE LOC-X23-Y12) (VISITED LOC-X23-Y13)
    (PLACE LOC-X23-Y13) (VISITED LOC-X23-Y14) (PLACE LOC-X23-Y14)
    (VISITED LOC-X23-Y15) (PLACE LOC-X23-Y15) (VISITED LOC-X23-Y16)
    (PLACE LOC-X23-Y16) (VISITED LOC-X23-Y17) (PLACE LOC-X23-Y17)
    (VISITED LOC-X23-Y18) (PLACE LOC-X23-Y18) (VISITED LOC-X23-Y19)
    (PLACE LOC-X23-Y19) (VISITED LOC-X23-Y20) (PLACE LOC-X23-Y20)
    (VISITED LOC-X23-Y21) (PLACE LOC-X23-Y21) (VISITED LOC-X23-Y22)
    (PLACE LOC-X23-Y22) (VISITED LOC-X23-Y23) (PLACE LOC-X23-Y23)
    (VISITED LOC-X23-Y24) (PLACE LOC-X23-Y24) (VISITED LOC-X23-Y25)
    (PLACE LOC-X23-Y25) (VISITED LOC-X23-Y26) (PLACE LOC-X23-Y26)
    (VISITED LOC-X23-Y27) (PLACE LOC-X23-Y27) (VISITED LOC-X23-Y28)
    (PLACE LOC-X23-Y28) (VISITED LOC-X23-Y29) (PLACE LOC-X23-Y29)
    (VISITED LOC-X24-Y0) (PLACE LOC-X24-Y0) (VISITED LOC-X24-Y1)
    (PLACE LOC-X24-Y1) (VISITED LOC-X24-Y2) (PLACE LOC-X24-Y2)
    (VISITED LOC-X24-Y3) (PLACE LOC-X24-Y3) (VISITED LOC-X24-Y4)
    (PLACE LOC-X24-Y4) (VISITED LOC-X24-Y5) (PLACE LOC-X24-Y5)
    (VISITED LOC-X24-Y6) (PLACE LOC-X24-Y6) (VISITED LOC-X24-Y7)
    (PLACE LOC-X24-Y7) (VISITED LOC-X24-Y8) (PLACE LOC-X24-Y8)
    (VISITED LOC-X24-Y9) (PLACE LOC-X24-Y9) (VISITED LOC-X24-Y10)
    (PLACE LOC-X24-Y10) (VISITED LOC-X24-Y11) (PLACE LOC-X24-Y11)
    (VISITED LOC-X24-Y12) (PLACE LOC-X24-Y12) (VISITED LOC-X24-Y13)
    (PLACE LOC-X24-Y13) (VISITED LOC-X24-Y14) (PLACE LOC-X24-Y14)
    (VISITED LOC-X24-Y15) (PLACE LOC-X24-Y15) (VISITED LOC-X24-Y16)
    (PLACE LOC-X24-Y16) (VISITED LOC-X24-Y17) (PLACE LOC-X24-Y17)
    (VISITED LOC-X24-Y18) (PLACE LOC-X24-Y18) (VISITED LOC-X24-Y19)
    (PLACE LOC-X24-Y19) (VISITED LOC-X24-Y20) (PLACE LOC-X24-Y20)
    (VISITED LOC-X24-Y21) (PLACE LOC-X24-Y21) (VISITED LOC-X24-Y22)
    (PLACE LOC-X24-Y22) (VISITED LOC-X24-Y23) (PLACE LOC-X24-Y23)
    (VISITED LOC-X24-Y24) (PLACE LOC-X24-Y24) (VISITED LOC-X24-Y25)
    (PLACE LOC-X24-Y25) (VISITED LOC-X24-Y26) (PLACE LOC-X24-Y26)
    (VISITED LOC-X24-Y27) (PLACE LOC-X24-Y27) (VISITED LOC-X24-Y28)
    (PLACE LOC-X24-Y28) (VISITED LOC-X24-Y29) (PLACE LOC-X24-Y29)
    (VISITED LOC-X25-Y0) (PLACE LOC-X25-Y0) (VISITED LOC-X25-Y1)
    (PLACE LOC-X25-Y1) (VISITED LOC-X25-Y2) (PLACE LOC-X25-Y2)
    (VISITED LOC-X25-Y3) (PLACE LOC-X25-Y3) (VISITED LOC-X25-Y4)
    (PLACE LOC-X25-Y4) (VISITED LOC-X25-Y5) (PLACE LOC-X25-Y5)
    (VISITED LOC-X25-Y6) (PLACE LOC-X25-Y6) (VISITED LOC-X25-Y7)
    (PLACE LOC-X25-Y7) (VISITED LOC-X25-Y8) (PLACE LOC-X25-Y8)
    (VISITED LOC-X25-Y9) (PLACE LOC-X25-Y9) (VISITED LOC-X25-Y10)
    (PLACE LOC-X25-Y10) (VISITED LOC-X25-Y11) (PLACE LOC-X25-Y11)
    (VISITED LOC-X25-Y12) (PLACE LOC-X25-Y12) (VISITED LOC-X25-Y13)
    (PLACE LOC-X25-Y13) (VISITED LOC-X25-Y14) (PLACE LOC-X25-Y14)
    (VISITED LOC-X25-Y15) (PLACE LOC-X25-Y15) (VISITED LOC-X25-Y16)
    (PLACE LOC-X25-Y16) (VISITED LOC-X25-Y17) (PLACE LOC-X25-Y17)
    (VISITED LOC-X25-Y18) (PLACE LOC-X25-Y18) (VISITED LOC-X25-Y19)
    (PLACE LOC-X25-Y19) (VISITED LOC-X25-Y20) (PLACE LOC-X25-Y20)
    (VISITED LOC-X25-Y21) (PLACE LOC-X25-Y21) (VISITED LOC-X25-Y22)
    (PLACE LOC-X25-Y22) (VISITED LOC-X25-Y23) (PLACE LOC-X25-Y23)
    (VISITED LOC-X25-Y24) (PLACE LOC-X25-Y24) (VISITED LOC-X25-Y25)
    (PLACE LOC-X25-Y25) (VISITED LOC-X25-Y26) (PLACE LOC-X25-Y26)
    (VISITED LOC-X25-Y27) (PLACE LOC-X25-Y27) (VISITED LOC-X25-Y28)
    (PLACE LOC-X25-Y28) (VISITED LOC-X25-Y29) (PLACE LOC-X25-Y29)
    (VISITED LOC-X26-Y0) (PLACE LOC-X26-Y0) (VISITED LOC-X26-Y1)
    (PLACE LOC-X26-Y1) (VISITED LOC-X26-Y2) (PLACE LOC-X26-Y2)
    (VISITED LOC-X26-Y3) (PLACE LOC-X26-Y3) (VISITED LOC-X26-Y4)
    (PLACE LOC-X26-Y4) (VISITED LOC-X26-Y5) (PLACE LOC-X26-Y5)
    (VISITED LOC-X26-Y6) (PLACE LOC-X26-Y6) (VISITED LOC-X26-Y7)
    (PLACE LOC-X26-Y7) (VISITED LOC-X26-Y8) (PLACE LOC-X26-Y8)
    (VISITED LOC-X26-Y9) (PLACE LOC-X26-Y9) (VISITED LOC-X26-Y10)
    (PLACE LOC-X26-Y10) (VISITED LOC-X26-Y11) (PLACE LOC-X26-Y11)
    (VISITED LOC-X26-Y12) (PLACE LOC-X26-Y12) (VISITED LOC-X26-Y13)
    (PLACE LOC-X26-Y13) (VISITED LOC-X26-Y14) (PLACE LOC-X26-Y14)
    (VISITED LOC-X26-Y15) (PLACE LOC-X26-Y15) (VISITED LOC-X26-Y16)
    (PLACE LOC-X26-Y16) (VISITED LOC-X26-Y17) (PLACE LOC-X26-Y17)
    (VISITED LOC-X26-Y18) (PLACE LOC-X26-Y18) (VISITED LOC-X26-Y19)
    (PLACE LOC-X26-Y19) (VISITED LOC-X26-Y20) (PLACE LOC-X26-Y20)
    (VISITED LOC-X26-Y21) (PLACE LOC-X26-Y21) (VISITED LOC-X26-Y22)
    (PLACE LOC-X26-Y22) (VISITED LOC-X26-Y23) (PLACE LOC-X26-Y23)
    (VISITED LOC-X26-Y24) (PLACE LOC-X26-Y24) (VISITED LOC-X26-Y25)
    (PLACE LOC-X26-Y25) (VISITED LOC-X26-Y26) (PLACE LOC-X26-Y26)
    (VISITED LOC-X26-Y27) (PLACE LOC-X26-Y27) (VISITED LOC-X26-Y28)
    (PLACE LOC-X26-Y28) (VISITED LOC-X26-Y29) (PLACE LOC-X26-Y29)
    (VISITED LOC-X27-Y0) (PLACE LOC-X27-Y0) (VISITED LOC-X27-Y1)
    (PLACE LOC-X27-Y1) (VISITED LOC-X27-Y2) (PLACE LOC-X27-Y2)
    (VISITED LOC-X27-Y3) (PLACE LOC-X27-Y3) (VISITED LOC-X27-Y4)
    (PLACE LOC-X27-Y4) (VISITED LOC-X27-Y5) (PLACE LOC-X27-Y5)
    (VISITED LOC-X27-Y6) (PLACE LOC-X27-Y6) (VISITED LOC-X27-Y7)
    (PLACE LOC-X27-Y7) (VISITED LOC-X27-Y8) (PLACE LOC-X27-Y8)
    (VISITED LOC-X27-Y9) (PLACE LOC-X27-Y9) (VISITED LOC-X27-Y10)
    (PLACE LOC-X27-Y10) (VISITED LOC-X27-Y11) (PLACE LOC-X27-Y11)
    (VISITED LOC-X27-Y12) (PLACE LOC-X27-Y12) (VISITED LOC-X27-Y13)
    (PLACE LOC-X27-Y13) (VISITED LOC-X27-Y14) (PLACE LOC-X27-Y14)
    (VISITED LOC-X27-Y15) (PLACE LOC-X27-Y15) (VISITED LOC-X27-Y16)
    (PLACE LOC-X27-Y16) (VISITED LOC-X27-Y17) (PLACE LOC-X27-Y17)
    (VISITED LOC-X27-Y18) (PLACE LOC-X27-Y18) (VISITED LOC-X27-Y19)
    (PLACE LOC-X27-Y19) (VISITED LOC-X27-Y20) (PLACE LOC-X27-Y20)
    (VISITED LOC-X27-Y21) (PLACE LOC-X27-Y21) (VISITED LOC-X27-Y22)
    (PLACE LOC-X27-Y22) (VISITED LOC-X27-Y23) (PLACE LOC-X27-Y23)
    (VISITED LOC-X27-Y24) (PLACE LOC-X27-Y24) (VISITED LOC-X27-Y25)
    (PLACE LOC-X27-Y25) (VISITED LOC-X27-Y26) (PLACE LOC-X27-Y26)
    (VISITED LOC-X27-Y27) (PLACE LOC-X27-Y27) (VISITED LOC-X27-Y28)
    (PLACE LOC-X27-Y28) (VISITED LOC-X27-Y29) (PLACE LOC-X27-Y29)
    (VISITED LOC-X28-Y0) (PLACE LOC-X28-Y0) (VISITED LOC-X28-Y1)
    (PLACE LOC-X28-Y1) (VISITED LOC-X28-Y2) (PLACE LOC-X28-Y2)
    (VISITED LOC-X28-Y3) (PLACE LOC-X28-Y3) (VISITED LOC-X28-Y4)
    (PLACE LOC-X28-Y4) (VISITED LOC-X28-Y5) (PLACE LOC-X28-Y5)
    (VISITED LOC-X28-Y6) (PLACE LOC-X28-Y6) (VISITED LOC-X28-Y7)
    (PLACE LOC-X28-Y7) (VISITED LOC-X28-Y8) (PLACE LOC-X28-Y8)
    (VISITED LOC-X28-Y9) (PLACE LOC-X28-Y9) (VISITED LOC-X28-Y10)
    (PLACE LOC-X28-Y10) (VISITED LOC-X28-Y11) (PLACE LOC-X28-Y11)
    (VISITED LOC-X28-Y12) (PLACE LOC-X28-Y12) (VISITED LOC-X28-Y13)
    (PLACE LOC-X28-Y13) (VISITED LOC-X28-Y14) (PLACE LOC-X28-Y14)
    (VISITED LOC-X28-Y15) (PLACE LOC-X28-Y15) (VISITED LOC-X28-Y16)
    (PLACE LOC-X28-Y16) (VISITED LOC-X28-Y17) (PLACE LOC-X28-Y17)
    (VISITED LOC-X28-Y18) (PLACE LOC-X28-Y18) (VISITED LOC-X28-Y19)
    (PLACE LOC-X28-Y19) (VISITED LOC-X28-Y20) (PLACE LOC-X28-Y20)
    (VISITED LOC-X28-Y21) (PLACE LOC-X28-Y21) (VISITED LOC-X28-Y22)
    (PLACE LOC-X28-Y22) (VISITED LOC-X28-Y23) (PLACE LOC-X28-Y23)
    (VISITED LOC-X28-Y24) (PLACE LOC-X28-Y24) (VISITED LOC-X28-Y25)
    (PLACE LOC-X28-Y25) (VISITED LOC-X28-Y26) (PLACE LOC-X28-Y26)
    (VISITED LOC-X28-Y27) (PLACE LOC-X28-Y27) (VISITED LOC-X28-Y28)
    (PLACE LOC-X28-Y28) (VISITED LOC-X28-Y29) (PLACE LOC-X28-Y29)
    (VISITED LOC-X29-Y0) (PLACE LOC-X29-Y0) (VISITED LOC-X29-Y1)
    (PLACE LOC-X29-Y1) (VISITED LOC-X29-Y2) (PLACE LOC-X29-Y2)
    (VISITED LOC-X29-Y3) (PLACE LOC-X29-Y3) (VISITED LOC-X29-Y4)
    (PLACE LOC-X29-Y4) (VISITED LOC-X29-Y5) (PLACE LOC-X29-Y5)
    (VISITED LOC-X29-Y6) (PLACE LOC-X29-Y6) (VISITED LOC-X29-Y7)
    (PLACE LOC-X29-Y7) (VISITED LOC-X29-Y8) (PLACE LOC-X29-Y8)
    (VISITED LOC-X29-Y9) (PLACE LOC-X29-Y9) (VISITED LOC-X29-Y10)
    (PLACE LOC-X29-Y10) (VISITED LOC-X29-Y11) (PLACE LOC-X29-Y11)
    (VISITED LOC-X29-Y12) (PLACE LOC-X29-Y12) (VISITED LOC-X29-Y13)
    (PLACE LOC-X29-Y13) (VISITED LOC-X29-Y14) (PLACE LOC-X29-Y14)
    (VISITED LOC-X29-Y15) (PLACE LOC-X29-Y15) (VISITED LOC-X29-Y16)
    (PLACE LOC-X29-Y16) (VISITED LOC-X29-Y17) (PLACE LOC-X29-Y17)
    (VISITED LOC-X29-Y18) (PLACE LOC-X29-Y18) (VISITED LOC-X29-Y19)
    (PLACE LOC-X29-Y19) (VISITED LOC-X29-Y20) (PLACE LOC-X29-Y20)
    (VISITED LOC-X29-Y21) (PLACE LOC-X29-Y21) (VISITED LOC-X29-Y22)
    (PLACE LOC-X29-Y22) (VISITED LOC-X29-Y23) (PLACE LOC-X29-Y23)
    (VISITED LOC-X29-Y24) (PLACE LOC-X29-Y24) (VISITED LOC-X29-Y25)
    (PLACE LOC-X29-Y25) (VISITED LOC-X29-Y26) (PLACE LOC-X29-Y26)
    (VISITED LOC-X29-Y27) (PLACE LOC-X29-Y27) (VISITED LOC-X29-Y28)
    (PLACE LOC-X29-Y28) (VISITED LOC-X29-Y29) (PLACE LOC-X29-Y29)))

(declaim (inline key-=<))
(defun key-=< (keys1 keys2)
  (declare (optimize (speed 2)))
  (declare ((simple-array fixnum (3)) keys1 keys2))
  (match* (keys1 keys2)
    (((vector a b c) (vector d e f))
     (or (< a d)
         (when (= a d)
           (or (< b e)
               (when (= b e)
                 (< c f))))))))

;;;; join-ordering-c : cached --- no meaningful improvements

#+(or) (ql:quickload :function-cache)

#+(or)
(function-cache:defcached join-key (c1 c2)
                          (match* (c1 c2)
                            (((list* _ args1) (list* _ args2))
                             (let ((key3 (length (union args1 args2))))
                               (vector (- key3 (length args1)) (- key3 (length args2)) key3)))))

#+(or)
(defun find-best-join-c (conditions)
  ;; too slow!
  (let (min-c1
        min-c2
        min-key)
    (iter (for (c1 . rest) on (sort (copy-list conditions) #'> :key #'length))
          (iter (for c2 in rest)
                (for key = (join-key c1 c2))
                (when (or (null min-key)
                          (key-=< key min-key))
                  (setf min-c1 c1
                        min-c2 c2
                        min-key key))))
    (values (union (cdr min-c1) (cdr min-c2)) min-c1 min-c2)))

#+(or)
(defun join-ordering-c (conditions)
  "Helmert09, p40. This impl takes O(N^2)"
  (join-ordering-aux-c conditions nil))

#+(or)
(defun join-ordering-aux-c (conditions acc)
  (if (<= (length conditions) 2)
      (values (mapcar #'tmp/relaxed-reachable conditions) acc)
      (multiple-value-bind (min-u min-c1 min-c2) (find-best-join conditions)
        (with-gensyms (tmp)
          (let ((new `(,tmp ,@min-u)))
            (join-ordering-aux-c
             (-<>> conditions
               (remove min-c1 arrow-macros:<> :test #'equal)
               (remove min-c2 arrow-macros:<> :test #'equal)
               (cons new))
             (list* `(:- (table (/ ,tmp ,(length min-u))))
                    `(:- ,new
                         ;; min-c1 has larger arity; put min-c2 first
                         ,(tmp/relaxed-reachable min-c2)
                         ,(tmp/relaxed-reachable min-c1))
                    acc)))))))

;;;; implementing with variable length; over my stack!

;;;; join-ordering2: implementation using O(N^2) table -- down to 33 sec, but still too slow

(defun push-back (object list)
  (setf (cdr (last list))
        (cons object nil))
  list)

(declaim (inline tuple))
(defun tuple (type &rest args)
  (declare (dynamic-extent args))
  (make-array (length args) :element-type type :initial-contents args))

(define-compiler-macro tuple (type &rest args)
  (with-gensyms (a)
    `(let ((,a (make-array ,(length args) :element-type ,type)))
       ,@(iter (for arg in args)
               (for i from 0)
               (collecting
                `(setf (aref ,a ,i) ,arg)))
       ,a)))

#+(or)
(print (funcall (compiler-macro-function 'tuple) '(tuple 'fixnum (min key1 key2) (max key1 key2) key3) nil))

#+(or)
(defun test-tuple (a b)
  (tuple 'fixnum a b))

(deftype tuple (type length)
  `(simple-array ,type (,length)))

;; can be matched as a vector
#+(or)
(match (tuple 'fixnum 1 2)
  ((vector a b) (print (list a b))))

(defun join-ordering2 (conditions)
  "Helmert09, p40"
  (let* ((l (length conditions))
         (a (make-array (* 2 l) :fill-pointer l))
         (keys (make-array (list (* 2 l) (* 2 l)) :initial-element nil))
         acc)
    (map-into a #'identity conditions)
    ;; (print a)
    (iter (for c1 in-vector a with-index i)
          (for (_ . args1) = c1)
          (for l1 = (length args1))
          (iter (for c2 in-vector a with-index j from (1+ i))
                (for (_ . args2) = c2)
                (for l2 = (length args2))
                (for u  = (union args1 args2))
                (for key3 = (length u))
                (for key1 = (- key3 l1))
                (for key2 = (- key3 l2))
                ;; (assert (< i j))
                (setf (aref keys i j) (tuple 'fixnum
                                             (min key1 key2)
                                             (max key1 key2)
                                             key3))))
    ;; (print keys)
    ;; find-best-join
    (iter (with open = (iota l))
          (repeat (- l 2))
          (for min-key = nil)
          (for min-i = 0)
          (for min-j = 0)
          (iter (for (i . rest) on open)
                (iter (for j in rest)
                      ;; (assert (< i j))
                      (for key = (aref keys i j))
                      ;; (when (null key)
                      ;;   (next-iteration))
                      (when (or (null min-key)
                                (key-=< key min-key))
                        (setf min-key key
                              min-i i
                              min-j j))))
          (deletef open min-i) (deletef open min-j)
          (with-gensyms (tmp)
            (let* ((args1 (union (cdr (aref a min-i)) (cdr (aref a min-j))))
                   (l1 (length args1))
                   (new `(,tmp ,@args1)))
              (vector-push-extend new a)
              (iter (for i in open)
                    (for (_ . args2) = (aref a i))
                    (for l2 = (length args2))
                    (for u  = (union args1 args2))
                    (for key3 = (length u))
                    (for key1 = (- key3 l1))
                    (for key2 = (- key3 l2))
                    (setf (aref keys i l) (tuple 'fixnum
                                                 (min key1 key2)
                                                 (max key1 key2)
                                                 key3)))
              (push-back l open)
              (incf l)
              (push `(:- (table (/ ,tmp ,l1))) acc)
              (push `(:- ,new
                         ;; min-c1 has larger arity; put min-c2 first
                         ,(tmp/relaxed-reachable (aref a min-i))
                         ,(tmp/relaxed-reachable (aref a min-j))) acc)))
          (finally
           (return
             (values (iter (for i in open)
                           (collecting
                            (tmp/relaxed-reachable (aref a i))))
                     acc))))))

#+(or)
(print-values
  (join-ordering2 '((in-city ?l1 ?c)
                    (in-city ?l2 ?c)
                    (at ?t ?l1))))

;;;; implementation using priority queues --- this was slower (89sec), but it is due to the closed list lookup

(defun join-ordering3 (conditions)
  "Helmert09, p40"
  (let* ((pq (pqueue:make-pqueue #'key-=<
                                 :key-type '(tuple fixnum 3)
                                 :value-type '(tuple list 2)))
         closed
         acc)
    (iter (for (c1 . rest) on conditions)
          (for (_ . args1) = c1)
          (for l1 = (length args1))
          (iter (for c2 in rest)
                (for (_ . args2) = c2)
                (for l2 = (length args2))
                (for u  = (union args1 args2))
                (for key3 = (length u))
                (for key1 = (- key3 l1))
                (for key2 = (- key3 l2))
                (pqueue:pqueue-push (tuple 'list c1 c2)
                                    (tuple 'fixnum
                                           (min key1 key2)
                                           (max key1 key2)
                                           key3)
                                    pq)))
    ;; find-best-join
    (iter (until (pqueue:pqueue-empty-p pq))
          (ematch (pqueue:pqueue-pop pq)
            ((vector c1 c2)
             (when (member c1 closed) (next-iteration))
             (when (member c2 closed) (next-iteration))
             (push c1 closed)
             (push c2 closed)
             (with-gensyms (tmp)
               (let* ((args1 (union (cdr c1) (cdr c2)))
                      (l1 (length args1))
                      (new `(,tmp ,@args1)))
                 (iter (for c2 in conditions)
                       (when (member c2 closed)
                         (next-iteration))
                       (for (_ . args2) = c2)
                       (for l2 = (length args2))
                       (for u  = (union args1 args2))
                       (for key3 = (length u))
                       (for key1 = (- key3 l1))
                       (for key2 = (- key3 l2))
                       (pqueue:pqueue-push (tuple 'list new c2)
                                           (tuple 'fixnum
                                                  (min key1 key2)
                                                  (max key1 key2)
                                                  key3)
                                           pq))
                 (push new conditions)
                 (push `(:- (table (/ ,tmp ,l1))) acc)
                 (push `(:- ,new
                            ,(tmp/relaxed-reachable c1)
                            ,(tmp/relaxed-reachable c2)) acc))))))
    (values (list (tmp/relaxed-reachable (first conditions)))
            acc)))

#+(or)
(print-values
  (join-ordering3 '((in-city ?l1 ?c)
                    (in-city ?l2 ?c)
                    (at ?t ?l1))))

#+(or)
(print (length (nth-value 1 (time (STRIPS::JOIN-ORDERING *conditions*)))))

;;;; implementation using priority queues + hashtable --- current fastest (6.8sec)

;; but it is still too slow. Reason is that there are too many closed pairs
;; pruning the last pair is not useful either

(defun join-ordering4 (conditions)
  "Helmert09, p40"
  (let* ((pq (pqueue:make-pqueue #'key-=<
                                 :key-type '(tuple fixnum 3)
                                 :value-type '(tuple list 2)))
         (closed (make-hash-table :test 'equal))
         acc)
    ;; out of ~7sec,
    ;; ~0.7 sec for initialization
    (iter (for (c1 . rest) on conditions)
          (for (_ . args1) = c1)
          (for l1 = (length args1))
          (iter (for c2 in rest)
                (for (_ . args2) = c2)
                (for l2 = (length args2))
                (for u  = (union args1 args2))
                (for key3 = (length u))
                (for key1 = (- key3 l1))
                (for key2 = (- key3 l2))
                (pqueue:pqueue-push (tuple 'list c1 c2)
                                    (tuple 'fixnum
                                           (min key1 key2)
                                           (max key1 key2)
                                           key3)
                                    pq)))
    ;; and 6.2 sec for find-best-join
    (iter (until (pqueue:pqueue-empty-p pq))
          (for i from 0)
          ;; (when (zerop (mod i 80)) (terpri))
          (ematch (pqueue:pqueue-pop pq)
            ((vector c1 c2)
             (when (gethash c1 closed)
               ;; (write-char #\f)
               (next-iteration))
             (when (gethash c2 closed)
               ;; (write-char #\f)
               (next-iteration))
             (setf (gethash c1 closed) t)
             (setf (gethash c2 closed) t)
             ;; (write-char #\.)
             (with-gensyms (tmp)
               (let* ((args1 (union (cdr c1) (cdr c2)))
                      (l1 (length args1))
                      (new `(,tmp ,@args1)))
                 (iter (for c2 in conditions)
                       (when (gethash c2 closed) (next-iteration))
                       (for (_ . args2) = c2)
                       (for l2 = (length args2))
                       (for u  = (union args1 args2))
                       (for key3 = (length u))
                       (for key1 = (- key3 l1))
                       (for key2 = (- key3 l2))
                       (pqueue:pqueue-push (tuple 'list new c2)
                                           (tuple 'fixnum
                                                  (min key1 key2)
                                                  (max key1 key2)
                                                  key3)
                                           pq)
                       (collecting c2))
                 (push new conditions)
                 (push `(:- (table (/ ,tmp ,l1))) acc)
                 (push `(:- ,new
                            ,(tmp/relaxed-reachable c1)
                            ,(tmp/relaxed-reachable c2)) acc))))))
    (values (list (tmp/relaxed-reachable (first conditions)))
            acc)))

;;;; rewriting join-ordering with pqueue --- NG, too slow

(defun join-ordering5 (conditions)
  "Helmert09, p40"
  (let* ((pq (pqueue:make-pqueue #'key-=<
                                 :key-type '(tuple fixnum 3)
                                 :value-type '(tuple list 2)))
         acc)
    (flet ((setup ()
             (iter (for (c1 . rest) on conditions)
                   (for (_ . args1) = c1)
                   (for l1 = (length args1))
                   (iter (for c2 in rest)
                         (for (_ . args2) = c2)
                         (for l2 = (length args2))
                         (for u  = (union args1 args2))
                         (for key3 = (length u))
                         (for key1 = (- key3 l1))
                         (for key2 = (- key3 l2))
                         (pqueue:pqueue-push (tuple 'list c1 c2)
                                             (tuple 'fixnum
                                                    (min key1 key2)
                                                    (max key1 key2)
                                                    key3)
                                             pq)))))
      (setup)
      (iter (until (pqueue:pqueue-empty-p pq))
            (for i from 0)
            (ematch (pqueue:pqueue-pop pq)
              ((vector c1 c2)
               (with-gensyms (tmp)
                 (let* ((args1 (union (cdr c1) (cdr c2)))
                        (l1 (length args1))
                        (new `(,tmp ,@args1)))
                   (setf conditions (cons new (set-difference conditions (list c1 c2) :test 'equal)))
                   (pqueue:pqueue-clear pq)
                   (setup)
                   (push new conditions)
                   (push `(:- (table (/ ,tmp ,l1))) acc)
                   (push `(:- ,new
                              ,(tmp/relaxed-reachable c1)
                              ,(tmp/relaxed-reachable c2)) acc)))))))
    (values (list (tmp/relaxed-reachable (first conditions)))
            acc)))

;;;; use indexes to make hashtable lookup faster. slightly faster, ~6.6sec

;; join-ordering6
;; (print (mean '(7.368 6.469 6.655 6.701 6.798 6.642 6.771 6.533 6.867 6.677)))
;; (print (mean '(6.469 6.655 6.701 6.798 6.642 6.771 6.533 6.867 6.677))) -> 6.67
;; 
;; join-ordering4
;; (print (mean '(7.096 7.117 6.848 6.61 6.957 6.865 7.142 6.825 6.948 6.789)))
;; (print (mean '(7.117 6.848 6.61 6.957 6.865 7.142 6.825 6.948 6.789))) -> 6.90

(defun join-ordering6 (conditions)
  "Helmert09, p40"
  (let* ((pq (pqueue:make-pqueue #'key-=<
                                 :key-type '(tuple fixnum 3)
                                 :value-type '(tuple fixnum 2)))
         (l (length conditions))
         (a (make-array (* 2 l) :fill-pointer l))
         (closed (make-hash-table :test 'eql))
         acc)
    (time
     (map-into a #'identity conditions))
    (time
     (iter (for c1 in-vector a with-index i)
           (for (_ . args1) = c1)
           (for l1 = (length args1))
           (iter (for c2 in-vector a with-index j from (1+ i))
                 (for (_ . args2) = c2)
                 (for l2 = (length args2))
                 (for u  = (union args1 args2))
                 (for key3 = (length u))
                 (for key1 = (- key3 l1))
                 (for key2 = (- key3 l2))
                 (pqueue:pqueue-push (tuple 'fixnum i j)
                                     (tuple 'fixnum
                                            (min key1 key2)
                                            (max key1 key2)
                                            key3)
                                     pq))))
    (time
     (iter (until (pqueue:pqueue-empty-p pq))
           (ematch (pqueue:pqueue-pop pq)
             ((vector i1 i2)
              (declare (fixnum i1 i2))
              (when (gethash i1 closed) (next-iteration))
              (when (gethash i2 closed) (next-iteration))
              (setf (gethash i1 closed) t)
              (setf (gethash i2 closed) t)
              (with-gensyms (tmp)
                (let* ((c1 (aref a i1))
                       (c2 (aref a i2))
                       (args1 (union (cdr c1) (cdr c2)))
                       (l1 (length args1))
                       (new `(,tmp ,@args1)))
                  (iter (for c2 in-vector a with-index i)
                        (when (gethash i closed) (next-iteration))
                        (for (_ . args2) = c2)
                        (for l2 = (length args2))
                        (for u  = (union args1 args2))
                        (for key3 = (length u))
                        (for key1 = (- key3 l1))
                        (for key2 = (- key3 l2))
                        (pqueue:pqueue-push (tuple 'fixnum i l)
                                            (tuple 'fixnum
                                                   (min key1 key2)
                                                   (max key1 key2)
                                                   key3)
                                            pq))
                  (incf l)
                  (vector-push new a)
                  (push `(:- (table (/ ,tmp ,l1))) acc)
                  (push `(:- ,new
                             ,(tmp/relaxed-reachable c1)
                             ,(tmp/relaxed-reachable c2)) acc)))))))
    (values (list (tmp/relaxed-reachable (last-elt a)))
            acc)))

;; (print-values
;;   (join-ordering6 '((in-city ?l1 ?c)
;;                     (in-city ?l2 ?c)
;;                     (at ?t ?l1))))

;;;; reduce consing by avoiding union; 3.3 sec XXX<- incorrect results. 6.5 sec

(defun join-ordering7 (conditions)
  "Helmert09, p40"
  (let* ((pq (pqueue:make-pqueue #'key-=<
                                 :key-type '(tuple fixnum 3)
                                 :value-type '(tuple fixnum 2)))
         (l (length conditions))
         (a (make-array (* 2 l) :fill-pointer l))
         (closed (make-hash-table :test 'eql))
         acc)
    (time
     (map-into a #'identity conditions))
    (time
     (iter (for c1 in-vector a with-index i)
           (iter (for c2 in-vector a with-index j from (1+ i))
                 (for only1 = 0)
                 (for intersec = 0)
                 (iter (for v1 in (cdr c1))
                       (if (iter (for v2 in (cdr c2))
                                 (never (eq v1 v2)))
                           (incf only1)
                           (incf intersec)))
                 (for only2 = (- (length c2) 1 intersec))
                 (for both = (+ only1 only2 intersec))
                 (pqueue:pqueue-push (tuple 'fixnum i j)
                                     (tuple 'fixnum
                                            (min only1 only2)
                                            (max only1 only2)
                                            both)
                                     pq))))
    (time
     (iter (until (pqueue:pqueue-empty-p pq))
           (ematch (pqueue:pqueue-pop pq)
             ((vector i1 i2)
              (declare (fixnum i1 i2))
              (when (gethash i1 closed) (next-iteration))
              (when (gethash i2 closed) (next-iteration))
              (setf (gethash i1 closed) t)
              (setf (gethash i2 closed) t)
              (with-gensyms (tmp)
                (let* ((c1 (aref a i1))
                       (c2 (aref a i2))
                       (new-args (union (cdr c1) (cdr c2)))
                       (new `(,tmp ,@new-args)))
                  (iter (for other in-vector a with-index i)
                        (when (gethash i closed) (next-iteration))
                        
                        (for only1 = 0)
                        (for intersec = 0)
                        (iter (for v1 in new-args)
                              (if (iter (for v2 in (cdr other))
                                        (never (eq v1 v2)))
                                  (incf only1)
                                  (incf intersec)))
                        (for only2 = (- (length other) 1 intersec))
                        (for both = (+ only1 only2 intersec))
                        
                        (pqueue:pqueue-push (tuple 'fixnum i l)
                                            (tuple 'fixnum
                                                   (min only1 only2)
                                                   (max only1 only2)
                                                   both)
                                            pq))
                  (incf l)
                  (vector-push new a)
                  (push `(:- (table (/ ,tmp ,(length new-args)))) acc)
                  (push `(:- ,new
                             ,(tmp/relaxed-reachable c1)
                             ,(tmp/relaxed-reachable c2)) acc)))))))
    (values (list (tmp/relaxed-reachable (coerce (last-elt a) 'list)))
            acc)))

;; (print-values
;;   (join-ordering7 '((in-city ?l1 ?c)
;;                     (in-city ?l2 ?c)
;;                     (at ?t ?l1))))

;;;; low-level optimization? ~6.2 sec. Further speedup will be achieved by a better priority queue

(deftype int ()
  `(unsigned-byte 32))

(defun join-ordering8 (conditions)
  "Helmert09, p40"
  (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare (list conditions))
  (let* ((pq (pqueue:make-pqueue #'key-=<
                                 :key-type '(tuple fixnum 3)
                                 :value-type '(tuple fixnum 2)))
         (l (length conditions))
         (a (make-array (* 2 l) :element-type 'list :initial-element nil))
         (closed (make-hash-table :test 'eql))
         acc)
    (declare (int l))
    (time
     (map-into a #'identity conditions))
    (time
     (loop for i below l
        for c1 = (aref a i)
        do (loop
              for j from (1+ i) below l
              do (let* ((c2 (aref a j))
                        (only1 0)
                        (intersec 0))
                   (declare (int only1 intersec)
                            (list c2))
                   (dolist (v1 (cdr c1))
                     (declare (symbol v1))
                     (if (member v1 (cdr c2))
                         (incf intersec)
                         (incf only1)))
                   ;; (assert (<= 0 (- (length c2) 1 intersec)))
                   (let* ((only2 (- (length c2) 1 intersec))
                          (both (+ only1 only2 intersec)))
                     (declare (int only2 both))
                     (pqueue:pqueue-push (tuple 'fixnum i j)
                                         (tuple 'fixnum
                                                (min only1 only2)
                                                (max only1 only2)
                                                both)
                                         pq))))))
    (time
      (tagbody
       :start
         (when (pqueue:pqueue-empty-p pq) (go :end))
         (ematch (the (tuple fixnum 2) (pqueue:pqueue-pop pq))
           ((vector i1 i2)
            (declare (fixnum i1 i2))
            (when (gethash i1 closed) (go :start))
            (when (gethash i2 closed) (go :start))
            (setf (gethash i1 closed) t)
            (setf (gethash i2 closed) t)
            (with-gensyms (tmp)
              (let* ((c1 (aref a i1))
                     (c2 (aref a i2))
                     (new-args (union (cdr c1) (cdr c2)))
                     (new `(,tmp ,@new-args)))
                (declare (list c1 c2 new-args new))
                (loop
                   for i below l
                   unless (gethash i closed)
                   do (let* ((other (aref a i))
                             (only1 0)
                             (intersec 0))
                        (declare (int only1 intersec)
                                 (list other))
                        (dolist (v1 new-args)
                          (declare (symbol v1))
                          (if (member v1 (cdr other))
                              (incf intersec)
                              (incf only1)))
                        (let* ((only2 (- (length other) 1 intersec))
                               (both (+ only1 only2 intersec)))
                          (declare (int only2 both))
                          (pqueue:pqueue-push (tuple 'fixnum i l)
                                              (tuple 'fixnum
                                                     (min only1 only2)
                                                     (max only1 only2)
                                                     both)
                                              pq))))
                (setf (aref a l) new)
                (incf l)
                (push `(:- (table (/ ,tmp ,(length new-args)))) acc)
                (push `(:- ,new
                           ,(tmp/relaxed-reachable c1)
                           ,(tmp/relaxed-reachable c2)) acc)))
            (go :start)))
       :end))
    (values (list (tmp/relaxed-reachable (aref a (1- l))))
            acc)))

;; (print-values
;;   (join-ordering8 '((in-city ?l1 ?c)
;;                     (in-city ?l2 ?c)
;;                     (at ?t ?l1))))

;;; combine keys into a single integer --- slower. 7.9sec

(defun join-ordering9 (conditions)
  "Helmert09, p40"
  (let* ((maximum-arg-length (time (length (reduce #'union conditions :key #'cdr))))
         (ilen (integer-length maximum-arg-length)))
    (if (<= ilen (/ (integer-length most-positive-fixnum) 3))
        (progn
          (format t "~&packed integer ~a ~%" ilen)
          (join-ordering9-aux conditions ilen))
        (join-ordering8 conditions))))

(deftype fixnum/3 ()
  `(unsigned-byte ,(floor (/ (integer-length most-positive-fixnum) 3))))

(defun join-ordering9-aux (conditions ilen)
  (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare (list conditions)
           ((integer 0 #.(floor (/ (integer-length most-positive-fixnum) 3))) ilen))
  (let* ((l (length conditions))
         (pq (pqueue:make-pqueue #'<
                                 :key-type 'fixnum
                                 :value-type '(tuple fixnum 2)))
         (a (make-array (* 2 l) :element-type 'list :initial-element nil))
         (closed (make-hash-table :test 'eql))
         acc)
    (declare (int l))
    (progn
     (map-into a #'identity conditions))
    (progn
     (loop for i below l
        for c1 = (aref a i)
        do (loop
              for j from (1+ i) below l
              do (let* ((c2 (aref a j))
                        (only1 0)
                        (intersec 0))
                   (declare (fixnum/3 only1 intersec)
                            (list c2))
                   (dolist (v1 (cdr c1))
                     (declare (symbol v1))
                     (if (member v1 (cdr c2))
                         (incf intersec)
                         (incf only1)))
                   (let* ((only2 (- (length c2) 1 intersec))
                          (both (+ only1 only2 intersec)))
                     (declare (fixnum/3 only2 both))
                     (pqueue:pqueue-push (tuple 'fixnum i j)
                                         ;; 2532
                                         ;; (+ (ash (min only1 only2) (* 2 ilen))
                                         ;;    (ash (max only1 only2) ilen)
                                         ;;    both)
                                         ;; 2520
                                         (+ (ash (+ (ash (min only1 only2)
                                                         ilen)
                                                    (max only1 only2))
                                                 ilen)
                                            both)
                                         pq))))))
    (progn
      (tagbody
       :start
         (when (pqueue:pqueue-empty-p pq) (go :end))
         (ematch (the (tuple fixnum 2) (pqueue:pqueue-pop pq))
           ((vector i1 i2)
            (declare (fixnum i1 i2))
            (when (gethash i1 closed) (go :start))
            (when (gethash i2 closed) (go :start))
            (setf (gethash i1 closed) t)
            (setf (gethash i2 closed) t)
            (with-gensyms (tmp)
              (let* ((c1 (aref a i1))
                     (c2 (aref a i2))
                     (new-args (union (cdr c1) (cdr c2)))
                     (new `(,tmp ,@new-args)))
                (declare (list c1 c2 new-args new))
                (loop
                   for i below l
                   unless (gethash i closed)
                   do (let* ((other (aref a i))
                             (only1 0)
                             (intersec 0))
                        (declare (fixnum/3 only1 intersec)
                                 (list other))
                        (dolist (v1 new-args)
                          (declare (symbol v1))
                          (if (member v1 (cdr other))
                              (incf intersec)
                              (incf only1)))
                        (let* ((only2 (- (length other) 1 intersec))
                               (both (+ only1 only2 intersec)))
                          (declare (fixnum/3 only2 both))
                          (pqueue:pqueue-push (tuple 'fixnum i l)
                                              ;; (+ (ash (min only1 only2) (* 2 ilen))
                                              ;;    (ash (max only1 only2) ilen)
                                              ;;    both)
                                              (+ (ash (+ (ash (min only1 only2)
                                                              ilen)
                                                         (max only1 only2))
                                                      ilen)
                                                 both)
                                              pq))))
                (setf (aref a l) new)
                (incf l)
                (push `(:- (table (/ ,tmp ,(length new-args)))) acc)
                (push `(:- ,new
                           ,(tmp/relaxed-reachable c1)
                           ,(tmp/relaxed-reachable c2)) acc)))
            (go :start)))
       :end))
    (values (list (tmp/relaxed-reachable (aref a (1- l))))
            acc)))
