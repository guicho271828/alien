#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -L sbcl-bin -m alien -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(:strips.instance-dependent) :silent t))

(in-package :strips)

(defun show-doc (specs)
  (iter (for (key arg variable) in specs)
        (format *error-output*
                "  ~(~{~a~^ | ~}~) ~a ~50t: ~a~%"
                (ensure-list key)
                arg
                (or (documentation variable 'variable) "undocumented"))))


(defun main (&rest argv)
  (declare (ignorable argv))
  (ematch argv
    ((list domain problem plan-output-file)
     (solve-once-to-file
      domain problem plan-output-file
      (lambda ()
        (with-memory-usage-diff ()
          (run
           (eager
            (bucket-open-list
             (goal-count))))))))
    ((list* (or "-t" "--time-limit") (read limit) rest)
     (setf *time-limit* limit)
     (apply #'main rest))
    ((list* (or "-t" "--memory-limit") (read limit) rest)
     (setf *memory-limit* limit)
     (apply #'main rest))
    ((list* "--sg-compilation-threashold" (read limit) rest)
     (setf *sg-compilation-threashold* limit)
     (apply #'main rest))
    ((list* "--effect-compilation-threashold" (read limit) rest)
     (setf *effect-compilation-threashold* mem)
     (apply #'main rest))
    (_
     (format *error-output* "Usage: alien.ros [options] domain problem plan-output-file~%")
     (show-doc
      `(((-t --time-limit) sec *time-limit*)
        ((-m --memory-limit) kbyte *memory-limit*)
        (--sg-compilation-threashold limit *sg-compilation-threashold*)
        (--effect-compilation-threashold limit *effect-compilation-threashold*))))))
;;; vim: set ft=lisp lisp:
