#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros dynamic-space-size=16000 -L sbcl-bin -m alien -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(:strips.instance-dependent) :silent t))

(in-package :strips)

(defun show-doc (specs)
  (iter (for (key arg variable) in specs)
        (format *error-output*
                "~@{~40@a : ~a~%~}"
                (format nil "~(~{~a~^ | ~}~) ~a" (ensure-list key) arg)
                (or (documentation variable 'variable) "undocumented")
                ""
                (format nil "  default value: ~a"
                        (if (boundp variable)
                            (symbol-value variable)
                            "unspecified")))))

(defvar *search-option* '(eager (bucket-open-list (ff/rpg)))
  "search configurations.")

(defun main (&rest argv)
  (declare (ignorable argv))
  (ematch argv
    ((list domain problem plan-output-file)
     (solve-once-to-file
      domain problem plan-output-file
      (lambda ()
        (with-memory-usage-diff ()
          (run
           (eval *search-option*))))))
    ((list* "-t" (read *time-limit*) rest)
     (apply #'main rest))
    ((list* "-m" (read *memory-limit*) rest)
     (apply #'main rest))
    ((list* "--sg-compilation-threashold" (read *sg-compilation-threashold*) rest)
     (apply #'main rest))
    ((list* "--effect-compilation-threashold" (read *effect-compilation-threashold*) rest)
     (apply #'main rest))
    ((list* "--search-option" (read *search-option*) rest)
     (apply #'main rest))
    (_
     (format *error-output* "Usage: alien.ros [options] domain problem plan-output-file~%")
     (show-doc
      `((-t sec *time-limit*)
        (-m kbyte *memory-limit*)
        (--sg-compilation-threashold limit *sg-compilation-threashold*)
        (--effect-compilation-threashold limit *effect-compilation-threashold*)
        (--search-option SEXP *search-option*))))))
;;; vim: set ft=lisp lisp:
